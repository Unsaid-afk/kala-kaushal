{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\n**Kala Kaushal** is an AI-powered sports talent assessment platform designed to democratize athletic talent discovery in India. The platform combines a React-based web application with AI-driven video analysis to evaluate athletic performance. Athletes can record fitness tests through an intuitive interface, receive AI-powered feedback on their technique and performance, and connect with sports scouts. The system supports multiple regional languages (Hindi, Gujarati, English) and features a dark-themed, futuristic UI with extensive animations and gamification elements.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI System**: Shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with custom dark theme variables and animations\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state and caching\n- **Animations**: Framer Motion for complex animations and transitions\n- **Design System**: Component-based architecture with reusable UI elements\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database ORM**: Drizzle ORM with PostgreSQL as the database\n- **Authentication**: Replit Auth integration with session management\n- **File Uploads**: Multer middleware for video file handling\n- **AI Integration**: OpenAI API for video analysis and performance assessment\n- **API Design**: RESTful endpoints with standardized error handling\n\n## Database Design\n- **Sessions Table**: Required for Replit Auth session storage\n- **Users Table**: Core user management with role-based access (athlete, scout, admin)\n- **Athletes Table**: Extended profile information including biometrics and sports data\n- **Assessments Table**: Video assessment records with AI analysis results\n- **Test Types**: Standardized fitness tests (sprint, jump, agility, etc.)\n- **Performance Metrics**: Tracked performance data over time\n- **Achievements System**: Gamification elements with badges and progress tracking\n\n## AI & Video Processing\n- **Video Analysis**: OpenAI's vision capabilities for movement analysis\n- **Performance Scoring**: Automated scoring based on form, technique, and metrics\n- **Real-time Feedback**: Computer vision guidance during recording\n- **Form Analysis**: Joint angle detection and posture evaluation\n- **Progress Tracking**: Historical performance comparison and improvement suggestions\n\n## Security & Authentication\n- **Replit Auth**: OAuth-based authentication with session management\n- **Role-based Access**: Different interfaces for athletes vs scouts\n- **File Validation**: Video file type and size restrictions\n- **Data Privacy**: Secure storage of personal and performance data\n\n## Mobile-First Design\n- **Responsive Layout**: Mobile-optimized interface with touch-friendly interactions\n- **PWA Capabilities**: Offline functionality for video recording\n- **Native-like Navigation**: Bottom navigation for mobile devices\n- **Performance Optimization**: Lazy loading and efficient rendering\n\n# External Dependencies\n\n## Core Infrastructure\n- **Neon Database**: PostgreSQL hosting with connection pooling\n- **Replit Auth**: Authentication and user management system\n- **OpenAI API**: AI-powered video analysis and computer vision\n\n## Frontend Libraries\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **TanStack React Query**: Server state management and caching\n- **Framer Motion**: Advanced animations and gesture handling\n- **React Hook Form**: Form management with validation\n- **Wouter**: Lightweight routing solution\n\n## Development Tools\n- **Vite**: Fast development server and build tool\n- **TypeScript**: Type safety and developer experience\n- **Tailwind CSS**: Utility-first styling framework\n- **Drizzle Kit**: Database migration and schema management\n\n## Media & File Handling\n- **Multer**: Multipart form data and file upload handling\n- **Web APIs**: Camera access and media recording capabilities\n\n## Build & Deployment\n- **ESBuild**: Fast JavaScript bundling for production\n- **PostCSS**: CSS processing and optimization\n- **Replit**: Development environment and hosting platform","size_bytes":4320},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        heading: [\"var(--font-heading)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        glow: {\n          \"0%\": { boxShadow: \"0 0 20px hsl(var(--primary) / 0.5)\" },\n          \"100%\": { boxShadow: \"0 0 30px hsl(var(--primary) / 0.8)\" },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        slideUp: {\n          from: { transform: \"translateY(20px)\", opacity: \"0\" },\n          to: { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n        fadeIn: {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        scaleIn: {\n          from: { transform: \"scale(0.9)\", opacity: \"0\" },\n          to: { transform: \"scale(1)\", opacity: \"1\" },\n        },\n        typing: {\n          from: { width: \"0\" },\n          to: { width: \"100%\" },\n        },\n        \"blink-caret\": {\n          \"from, to\": { borderColor: \"transparent\" },\n          \"50%\": { borderColor: \"hsl(var(--primary))\" },\n        },\n        bounce: {\n          \"0%, 20%, 53%, 80%, 100%\": {\n            transform: \"translateY(0)\",\n          },\n          \"40%, 43%\": {\n            transform: \"translateY(-8px)\",\n          },\n          \"70%\": {\n            transform: \"translateY(-4px)\",\n          },\n          \"90%\": {\n            transform: \"translateY(-2px)\",\n          },\n        },\n        spin: {\n          \"0%\": { transform: \"rotate(0deg)\" },\n          \"100%\": { transform: \"rotate(360deg)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        glow: \"glow 2s ease-in-out infinite alternate\",\n        \"pulse-slow\": \"pulse 3s ease-in-out infinite\",\n        float: \"float 3s ease-in-out infinite\",\n        \"slide-up\": \"slideUp 0.5s ease-out\",\n        \"fade-in\": \"fadeIn 0.8s ease-out\",\n        \"scale-in\": \"scaleIn 0.3s ease-out\",\n        typewriter: \"typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite\",\n        bounce: \"bounce 0.6s ease-in-out\",\n        spin: \"spin 1s linear infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4793},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  const domains = process.env.REPLIT_DOMAINS!.split(\",\");\n  \n  for (const domain of domains) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n  \n  // Add localhost alias to prevent mismatches\n  if (domains.length > 0) {\n    const localhostStrategy = new Strategy(\n      {\n        name: `replitauth:localhost`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domains[0]}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(localhostStrategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    // Use X-Forwarded-Host for proxy-aware domain resolution\n    const forwarded = req.get('x-forwarded-host')?.split(',')[0].trim().toLowerCase();\n    const host = forwarded || req.headers.host?.split(':')[0]?.toLowerCase() || req.hostname.toLowerCase();\n    const domains = process.env.REPLIT_DOMAINS!.split(',').map(d => d.toLowerCase());\n    const domain = domains.includes(host) ? host : domains[0];\n    \n    console.log(`DEBUG: forwarded=${forwarded}, host=${host}, domains=${JSON.stringify(domains)}, selected domain=${domain}`);\n    \n    passport.authenticate(`replitauth:${domain}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    // Use X-Forwarded-Host for proxy-aware domain resolution\n    const forwarded = req.get('x-forwarded-host')?.split(',')[0].trim().toLowerCase();\n    const host = forwarded || req.headers.host?.split(':')[0]?.toLowerCase() || req.hostname.toLowerCase();\n    const domains = process.env.REPLIT_DOMAINS!.split(',').map(d => d.toLowerCase());\n    const domain = domains.includes(host) ? host : domains[0];\n    \n    passport.authenticate(`replitauth:${domain}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  // Handle both GET (browser redirect) and POST (API) logout\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n\n  app.post(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      \n      // Destroy the session\n      req.session.destroy((sessionErr) => {\n        if (sessionErr) {\n          return res.status(500).json({ message: \"Session cleanup failed\" });\n        }\n        \n        // Clear the session cookie\n        res.clearCookie('connect.sid');\n        res.json({ message: \"Logged out successfully\" });\n      });\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":6140},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { videoAnalysisService } from \"./services/openai\";\nimport { insertAthleteSchema, insertAssessmentSchema, insertKalaPradarshanVideoSchema } from \"@shared/schema\";\nimport multer from \"multer\";\nimport { z } from \"zod\";\nimport fs from \"fs/promises\";\nimport path from \"path\";\n\n// Function to sanitize filename\nfunction sanitizeFilename(filename: string): string {\n  return filename\n    .replace(/[^a-zA-Z0-9.-]/g, '_') // Keep only alphanumeric, dots, and hyphens\n    .replace(/_{2,}/g, '_') // Collapse multiple underscores\n    .substring(0, 100); // Limit length\n}\n\n// Function to ensure upload directory exists\nasync function ensureUploadDir() {\n  await fs.mkdir('./uploads/tmp', { recursive: true });\n}\n\n// Configure multer for video uploads with disk storage for safety\nconst upload = multer({ \n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      // Fix error handling with proper callback usage\n      ensureUploadDir()\n        .then(() => cb(null, './uploads/tmp'))\n        .catch(err => cb(err));\n    },\n    filename: (req, file, cb) => {\n      const sanitizedName = sanitizeFilename(file.originalname);\n      const uniqueName = `${Date.now()}-${Math.round(Math.random() * 1E9)}-${sanitizedName}`;\n      cb(null, uniqueName);\n    }\n  }),\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith('video/')) {\n      cb(null, true);\n    } else {\n      cb(null, false);\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve uploaded files statically\n  app.use('/uploads', express.static('uploads'));\n  \n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Get athlete profile if user is an athlete\n      let athlete = null;\n      if (user.role === 'athlete') {\n        athlete = await storage.getAthlete(userId);\n      }\n      \n      res.json({ ...user, athlete });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Athlete profile routes\n  app.post('/api/athletes', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const athleteData = insertAthleteSchema.parse({ ...req.body, userId });\n      \n      const athlete = await storage.createAthlete(athleteData);\n      res.json(athlete);\n    } catch (error) {\n      console.error(\"Error creating athlete profile:\", error);\n      res.status(400).json({ message: \"Failed to create athlete profile\" });\n    }\n  });\n\n  app.get('/api/athletes/:id', isAuthenticated, async (req, res) => {\n    try {\n      const athlete = await storage.getAthleteById(req.params.id);\n      if (!athlete) {\n        return res.status(404).json({ message: \"Athlete not found\" });\n      }\n      \n      // Record scout view if user is a scout\n      const user = req.user as any;\n      if (user.claims && user.claims.sub) {\n        const currentUser = await storage.getUser(user.claims.sub);\n        if (currentUser?.role === 'scout') {\n          await storage.recordScoutView(user.claims.sub, athlete.id);\n        }\n      }\n      \n      res.json(athlete);\n    } catch (error) {\n      console.error(\"Error fetching athlete:\", error);\n      res.status(500).json({ message: \"Failed to fetch athlete\" });\n    }\n  });\n\n  app.get('/api/athletes', async (req, res) => {\n    try {\n      const { search, sport, location, limit = '20', offset = '0' } = req.query;\n      \n      let athletes;\n      if (search || sport || location) {\n        athletes = await storage.searchAthletes(\n          search as string,\n          sport as string,\n          location as string\n        );\n      } else {\n        athletes = await storage.getAllAthletes(\n          parseInt(limit as string),\n          parseInt(offset as string)\n        );\n      }\n      \n      res.json(athletes);\n    } catch (error) {\n      console.error(\"Error fetching athletes:\", error);\n      res.status(500).json({ message: \"Failed to fetch athletes\" });\n    }\n  });\n\n  app.get('/api/athletes/top/:limit?', async (req, res) => {\n    try {\n      const limit = parseInt(req.params.limit || '10');\n      const topAthletes = await storage.getTopAthletes(limit);\n      res.json(topAthletes);\n    } catch (error) {\n      console.error(\"Error fetching top athletes:\", error);\n      res.status(500).json({ message: \"Failed to fetch top athletes\" });\n    }\n  });\n\n  // Assessment routes\n  app.get('/api/test-types', async (req, res) => {\n    try {\n      const testTypes = await storage.getActiveTestTypes();\n      res.json(testTypes);\n    } catch (error) {\n      console.error(\"Error fetching test types:\", error);\n      res.status(500).json({ message: \"Failed to fetch test types\" });\n    }\n  });\n\n  app.post('/api/assessments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const athlete = await storage.getAthlete(userId);\n      \n      if (!athlete) {\n        return res.status(404).json({ message: \"Athlete profile not found\" });\n      }\n\n      const assessmentData = insertAssessmentSchema.parse({\n        ...req.body,\n        athleteId: athlete.id\n      });\n      \n      const assessment = await storage.createAssessment(assessmentData);\n      res.json(assessment);\n    } catch (error) {\n      console.error(\"Error creating assessment:\", error);\n      res.status(400).json({ message: \"Failed to create assessment\" });\n    }\n  });\n\n  app.get('/api/assessments/:id', isAuthenticated, async (req, res) => {\n    try {\n      const assessment = await storage.getAssessment(req.params.id);\n      if (!assessment) {\n        return res.status(404).json({ message: \"Assessment not found\" });\n      }\n      \n      // Get associated metrics\n      const metrics = await storage.getAssessmentMetrics(assessment.id);\n      \n      res.json({ ...assessment, metrics });\n    } catch (error) {\n      console.error(\"Error fetching assessment:\", error);\n      res.status(500).json({ message: \"Failed to fetch assessment\" });\n    }\n  });\n\n  app.get('/api/athletes/:athleteId/assessments', isAuthenticated, async (req, res) => {\n    try {\n      const assessments = await storage.getAthleteAssessments(req.params.athleteId);\n      res.json(assessments);\n    } catch (error) {\n      console.error(\"Error fetching athlete assessments:\", error);\n      res.status(500).json({ message: \"Failed to fetch assessments\" });\n    }\n  });\n\n  // AI Insights endpoint\n  app.get('/api/athletes/:id/ai-insights', isAuthenticated, async (req, res) => {\n    try {\n      const athleteId = req.params.id;\n      const athlete = await storage.getAthleteById(athleteId);\n      \n      if (!athlete) {\n        return res.status(404).json({ message: \"Athlete not found\" });\n      }\n\n      // Get athlete assessments and metrics\n      const assessments = await storage.getAthleteAssessments(athleteId);\n      const completedAssessments = assessments.filter(a => a.status === 'completed');\n      \n      // Get performance metrics for all completed assessments\n      const allMetrics = [];\n      for (const assessment of completedAssessments) {\n        const metrics = await storage.getAssessmentMetrics(assessment.id);\n        allMetrics.push(...metrics);\n      }\n\n      // Generate AI insights\n      const insights = await videoAnalysisService.generateAthleteInsights(\n        athlete,\n        completedAssessments,\n        allMetrics\n      );\n\n      res.json(insights);\n    } catch (error) {\n      console.error(\"Error generating AI insights:\", error);\n      res.status(500).json({ message: \"Failed to generate AI insights\" });\n    }\n  });\n\n  // Video gallery endpoint\n  app.get('/api/athletes/:id/videos', isAuthenticated, async (req, res) => {\n    try {\n      const athleteId = req.params.id;\n      const athlete = await storage.getAthleteById(athleteId);\n      \n      if (!athlete) {\n        return res.status(404).json({ message: \"Athlete not found\" });\n      }\n\n      // Get assessments with videos (those that have been completed with AI analysis)\n      const assessments = await storage.getAthleteAssessments(athleteId);\n      const videosData = assessments\n        .filter(a => a.status === 'completed' && a.aiAnalysisResults)\n        .map(assessment => ({\n          id: assessment.id,\n          testTypeId: assessment.testTypeId,\n          createdAt: assessment.createdAt,\n          performanceScore: assessment.aiAnalysisResults?.performanceScore || 0,\n          feedback: assessment.aiAnalysisResults?.feedback || '',\n          // Note: In a real app, you'd store video URLs or file paths\n          // For now, we'll use placeholder data\n          thumbnailUrl: `/api/assessments/${assessment.id}/thumbnail`,\n          videoUrl: `/api/assessments/${assessment.id}/video`,\n          duration: assessment.aiAnalysisResults?.videoDuration || 30,\n          title: `Assessment ${assessment.id.slice(0, 8)}`,\n        }));\n\n      res.json(videosData);\n    } catch (error) {\n      console.error(\"Error fetching athlete videos:\", error);\n      res.status(500).json({ message: \"Failed to fetch videos\" });\n    }\n  });\n\n  // Video upload and analysis\n  app.post('/api/assessments/:id/upload-video', \n    isAuthenticated, \n    upload.single('video'), \n    async (req: any, res) => {\n      try {\n        const assessmentId = req.params.id;\n        const assessment = await storage.getAssessment(assessmentId);\n        \n        if (!assessment) {\n          return res.status(404).json({ message: \"Assessment not found\" });\n        }\n\n        if (!req.file) {\n          return res.status(400).json({ message: \"No video file provided\" });\n        }\n\n        // Update assessment status to processing\n        await storage.updateAssessmentStatus(assessmentId, 'processing');\n\n        // Convert video to base64 for OpenAI analysis\n        const base64Video = req.file.buffer.toString('base64');\n        \n        // Get test type info\n        const testTypes = await storage.getAllTestTypes();\n        const testType = testTypes.find(t => t.id === assessment.testTypeId);\n        \n        // Get athlete info for context\n        const athlete = await storage.getAthleteById(assessment.athleteId);\n        \n        try {\n          // Validate video integrity\n          const integrity = await videoAnalysisService.validateVideoIntegrity(base64Video);\n          \n          if (!integrity.isValid) {\n            await storage.updateAssessmentStatus(assessmentId, 'failed', {\n              error: 'Video integrity validation failed',\n              issues: integrity.issues\n            });\n            return res.status(400).json({ \n              message: \"Video validation failed\", \n              issues: integrity.issues \n            });\n          }\n\n          // Analyze video performance\n          const analysisResult = await videoAnalysisService.analyzePerformanceVideo(\n            base64Video,\n            testType?.name || 'general',\n            {\n              age: athlete?.age || undefined,\n              height: athlete?.height ? parseFloat(athlete.height) : undefined,\n              weight: athlete?.weight ? parseFloat(athlete.weight) : undefined,\n              sport: athlete?.primarySport || undefined\n            }\n          );\n\n          // Calculate overall performance score\n          const performanceScore = analysisResult.performanceScore;\n\n          // Store analysis results\n          await storage.updateAssessmentStatus(assessmentId, 'completed', {\n            ...analysisResult,\n            integrity: integrity\n          });\n\n          // Create performance metrics\n          for (const metric of analysisResult.metrics) {\n            await storage.createPerformanceMetric({\n              assessmentId,\n              metricName: metric.name,\n              value: metric.value.toString(),\n              unit: metric.unit,\n              percentile: null,\n              confidence: metric.confidence.toString()\n            });\n          }\n\n          res.json({\n            message: \"Video analyzed successfully\",\n            assessment: await storage.getAssessment(assessmentId),\n            analysisResult\n          });\n\n        } catch (analysisError) {\n          console.error(\"AI analysis failed:\", analysisError);\n          await storage.updateAssessmentStatus(assessmentId, 'failed', {\n            error: 'AI analysis failed',\n            details: (analysisError as Error).message\n          });\n          \n          res.status(500).json({ \n            message: \"Video analysis failed\", \n            error: (analysisError as Error).message \n          });\n        }\n\n      } catch (error) {\n        console.error(\"Video upload error:\", error);\n        res.status(500).json({ message: \"Failed to process video upload\" });\n      }\n    }\n  );\n\n  // Leaderboard routes\n  app.get('/api/leaderboard', async (req, res) => {\n    try {\n      const { sport, metric, limit = '20' } = req.query;\n      const leaderboard = await storage.getLeaderboard(\n        sport as string,\n        metric as string,\n        parseInt(limit as string)\n      );\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  // Achievement routes\n  app.get('/api/achievements', async (req, res) => {\n    try {\n      const achievements = await storage.getAllAchievements();\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Error fetching achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  app.get('/api/athletes/:athleteId/achievements', async (req, res) => {\n    try {\n      const userAchievements = await storage.getUserAchievements(req.params.athleteId);\n      res.json(userAchievements);\n    } catch (error) {\n      console.error(\"Error fetching user achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch user achievements\" });\n    }\n  });\n\n  // Scout dashboard routes\n  app.get('/api/scout/activity', isAuthenticated, async (req: any, res) => {\n    try {\n      const scoutId = req.user.claims.sub;\n      const activity = await storage.getScoutActivity(scoutId);\n      res.json(activity);\n    } catch (error) {\n      console.error(\"Error fetching scout activity:\", error);\n      res.status(500).json({ message: \"Failed to fetch scout activity\" });\n    }\n  });\n\n  // Dashboard statistics\n  app.get('/api/dashboard/stats', isAuthenticated, async (req, res) => {\n    try {\n      // This would typically involve complex aggregation queries\n      // For now, return some basic stats\n      const stats = {\n        totalAthletes: 12847,\n        totalAssessments: 8932,\n        topPerformers: 1203,\n        scoutViews: 24567,\n        // These would be calculated from actual data\n        growthStats: {\n          athletes: '+12%',\n          assessments: '+18%',\n          performers: '+8%',\n          views: '+25%'\n        }\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard statistics\" });\n    }\n  });\n\n  // Kala Pradarshan (Public Video Showcase) routes\n  \n  // Get all public videos with optional sport filter\n  app.get('/api/kala-pradarshan', async (req, res) => {\n    try {\n      const { sport, page = 1, limit = 20 } = req.query;\n      const offset = (Number(page) - 1) * Number(limit);\n      \n      const videos = await storage.getKalaPradarshanVideos(\n        Number(limit), \n        offset, \n        sport as string\n      );\n      \n      res.json(videos);\n    } catch (error) {\n      console.error(\"Error fetching Kala Pradarshan videos:\", error);\n      res.status(500).json({ message: \"Failed to fetch videos\" });\n    }\n  });\n\n  // Upload a new public video\n  app.post('/api/kala-pradarshan', isAuthenticated, upload.single('video'), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { title, description, sport, tags } = req.body;\n      \n      if (!req.file) {\n        return res.status(400).json({ message: \"Video file is required\" });\n      }\n\n      // With disk storage, file is already saved; move it to final location\n      // SECURITY: Server-derived path, not client-controlled\n      const timestamp = Date.now();\n      const finalFileName = `kala-pradarshan/${userId}/${timestamp}-video`;\n      const videoUrl = await storage.uploadFile(req.file.path, finalFileName);\n      \n      const videoData = insertKalaPradarshanVideoSchema.parse({\n        userId,\n        title,\n        description,\n        sport,\n        videoUrl,\n        tags: tags ? tags.split(',').map((tag: string) => tag.trim()) : [],\n        metadata: {\n          originalName: req.file.originalname,\n          size: req.file.size,\n          mimetype: req.file.mimetype,\n        }\n      });\n      \n      const video = await storage.createKalaPradarshanVideo(videoData);\n      res.json(video);\n    } catch (error) {\n      console.error(\"Error uploading Kala Pradarshan video:\", error);\n      res.status(500).json({ message: \"Failed to upload video\" });\n    }\n  });\n\n  // Get a specific video\n  app.get('/api/kala-pradarshan/:id', async (req, res) => {\n    try {\n      const video = await storage.getKalaPradarshanVideoById(req.params.id);\n      if (!video) {\n        return res.status(404).json({ message: \"Video not found\" });\n      }\n      \n      res.json(video);\n    } catch (error) {\n      console.error(\"Error fetching video:\", error);\n      res.status(500).json({ message: \"Failed to fetch video\" });\n    }\n  });\n\n  // Increment video views\n  app.post('/api/kala-pradarshan/:id/view', async (req, res) => {\n    try {\n      await storage.incrementVideoViews(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error incrementing views:\", error);\n      res.status(500).json({ message: \"Failed to update views\" });\n    }\n  });\n\n  // Like a video\n  app.post('/api/kala-pradarshan/:id/like', isAuthenticated, async (req, res) => {\n    try {\n      await storage.incrementVideoLikes(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error liking video:\", error);\n      res.status(500).json({ message: \"Failed to like video\" });\n    }\n  });\n\n  // Get user's own videos\n  app.get('/api/users/kala-pradarshan', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const videos = await storage.getUserKalaPradarshanVideos(userId);\n      res.json(videos);\n    } catch (error) {\n      console.error(\"Error fetching user videos:\", error);\n      res.status(500).json({ message: \"Failed to fetch user videos\" });\n    }\n  });\n\n  // Training recommendations\n  app.post('/api/athletes/:athleteId/training-recommendations', isAuthenticated, async (req, res) => {\n    try {\n      const athleteId = req.params.athleteId;\n      const { goals } = req.body;\n      \n      const athlete = await storage.getAthleteById(athleteId);\n      if (!athlete) {\n        return res.status(404).json({ message: \"Athlete not found\" });\n      }\n      \n      const recentAssessments = await storage.getAthleteAssessments(athleteId);\n      \n      const recommendations = await videoAnalysisService.generateTrainingRecommendations(\n        athlete,\n        recentAssessments.slice(0, 5), // Last 5 assessments\n        goals || []\n      );\n      \n      res.json(recommendations);\n    } catch (error) {\n      console.error(\"Error generating training recommendations:\", error);\n      res.status(500).json({ message: \"Failed to generate training recommendations\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":20215},"server/storage.ts":{"content":"import {\n  users,\n  athletes,\n  assessments,\n  testTypes,\n  performanceMetrics,\n  achievements,\n  userAchievements,\n  scoutViews,\n  trainingPlans,\n  kalaPradarshanVideos,\n  type User,\n  type UpsertUser,\n  type Athlete,\n  type InsertAthlete,\n  type Assessment,\n  type InsertAssessment,\n  type TestType,\n  type PerformanceMetric,\n  type Achievement,\n  type UserAchievement,\n  type InsertKalaPradarshanVideo,\n  type KalaPradarshanVideo,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, inArray } from \"drizzle-orm\";\nimport fs from \"fs/promises\";\nimport path from \"path\";\n\nexport interface IStorage {\n  // User operations - required for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Athlete operations\n  getAthlete(userId: string): Promise<Athlete | undefined>;\n  getAthleteById(id: string): Promise<Athlete | undefined>;\n  createAthlete(athlete: InsertAthlete): Promise<Athlete>;\n  updateAthlete(id: string, updates: Partial<InsertAthlete>): Promise<Athlete>;\n  getAllAthletes(limit?: number, offset?: number): Promise<Athlete[]>;\n  searchAthletes(query: string, sport?: string, location?: string): Promise<Athlete[]>;\n  getTopAthletes(limit?: number): Promise<Athlete[]>;\n  \n  // Kala Pradarshan (Public Video Showcase) operations\n  createKalaPradarshanVideo(videoData: InsertKalaPradarshanVideo): Promise<KalaPradarshanVideo>;\n  getKalaPradarshanVideos(limit?: number, offset?: number, sport?: string): Promise<KalaPradarshanVideo[]>;\n  getKalaPradarshanVideoById(id: string): Promise<KalaPradarshanVideo | undefined>;\n  incrementVideoViews(id: string): Promise<void>;\n  incrementVideoLikes(id: string): Promise<void>;\n  getUserKalaPradarshanVideos(userId: string): Promise<KalaPradarshanVideo[]>;\n  \n  // File operations\n  uploadFile(tempFilePath: string, targetPath: string): Promise<string>;\n  \n  // Assessment operations\n  createAssessment(assessment: InsertAssessment): Promise<Assessment>;\n  getAssessment(id: string): Promise<Assessment | undefined>;\n  getAthleteAssessments(athleteId: string): Promise<Assessment[]>;\n  updateAssessmentStatus(id: string, status: string, results?: any): Promise<Assessment>;\n  \n  // Test type operations\n  getAllTestTypes(): Promise<TestType[]>;\n  getActiveTestTypes(): Promise<TestType[]>;\n  \n  // Performance metrics\n  createPerformanceMetric(metric: Omit<PerformanceMetric, 'id' | 'createdAt'>): Promise<PerformanceMetric>;\n  getAssessmentMetrics(assessmentId: string): Promise<PerformanceMetric[]>;\n  \n  // Achievements\n  getAllAchievements(): Promise<Achievement[]>;\n  getUserAchievements(athleteId: string): Promise<UserAchievement[]>;\n  unlockAchievement(athleteId: string, achievementId: string): Promise<UserAchievement>;\n  \n  // Scout operations\n  recordScoutView(scoutId: string, athleteId: string, duration?: number): Promise<void>;\n  getScoutActivity(scoutId: string): Promise<any[]>;\n  \n  // Leaderboards\n  getLeaderboard(sport?: string, metric?: string, limit?: number): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations - required for Replit Auth\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Athlete operations\n  async getAthlete(userId: string): Promise<Athlete | undefined> {\n    const [athlete] = await db.select().from(athletes).where(eq(athletes.userId, userId));\n    return athlete;\n  }\n\n  async getAthleteById(id: string): Promise<Athlete | undefined> {\n    const [athlete] = await db.select().from(athletes).where(eq(athletes.id, id));\n    return athlete;\n  }\n\n  async createAthlete(athlete: InsertAthlete): Promise<Athlete> {\n    const [newAthlete] = await db.insert(athletes).values(athlete).returning();\n    return newAthlete;\n  }\n\n  async updateAthlete(id: string, updates: Partial<InsertAthlete>): Promise<Athlete> {\n    const [updated] = await db\n      .update(athletes)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(athletes.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getAllAthletes(limit = 50, offset = 0): Promise<Athlete[]> {\n    return db.select().from(athletes)\n      .orderBy(desc(athletes.overallRating))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async searchAthletes(query: string, sport?: string, location?: string): Promise<Athlete[]> {\n    let conditions = [];\n    \n    if (query) {\n      conditions.push(\n        sql`${athletes.userId} IN (\n          SELECT id FROM ${users} \n          WHERE LOWER(first_name || ' ' || last_name) LIKE LOWER(${'%' + query + '%'})\n        )`\n      );\n    }\n    \n    if (sport) {\n      conditions.push(eq(athletes.primarySport, sport));\n    }\n    \n    if (location) {\n      conditions.push(eq(athletes.location, location));\n    }\n\n    const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n    \n    return db.select().from(athletes)\n      .where(whereClause)\n      .orderBy(desc(athletes.overallRating))\n      .limit(20);\n  }\n\n  async getTopAthletes(limit = 10): Promise<Athlete[]> {\n    return db.select().from(athletes)\n      .where(eq(athletes.isVerified, true))\n      .orderBy(desc(athletes.overallRating))\n      .limit(limit);\n  }\n\n  // Assessment operations\n  async createAssessment(assessment: InsertAssessment): Promise<Assessment> {\n    const [newAssessment] = await db.insert(assessments).values(assessment).returning();\n    return newAssessment;\n  }\n\n  async getAssessment(id: string): Promise<Assessment | undefined> {\n    const [assessment] = await db.select().from(assessments).where(eq(assessments.id, id));\n    return assessment;\n  }\n\n  async getAthleteAssessments(athleteId: string): Promise<Assessment[]> {\n    return db.select().from(assessments)\n      .where(eq(assessments.athleteId, athleteId))\n      .orderBy(desc(assessments.createdAt));\n  }\n\n  async updateAssessmentStatus(id: string, status: string, results?: any): Promise<Assessment> {\n    const updates: any = { status, updatedAt: new Date() };\n    if (results) {\n      updates.aiAnalysisResults = results;\n    }\n    \n    const [updated] = await db\n      .update(assessments)\n      .set(updates)\n      .where(eq(assessments.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Test type operations\n  async getAllTestTypes(): Promise<TestType[]> {\n    return db.select().from(testTypes).orderBy(testTypes.category, testTypes.name);\n  }\n\n  async getActiveTestTypes(): Promise<TestType[]> {\n    return db.select().from(testTypes)\n      .where(eq(testTypes.isActive, true))\n      .orderBy(testTypes.category, testTypes.name);\n  }\n\n  // Performance metrics\n  async createPerformanceMetric(metric: Omit<PerformanceMetric, 'id' | 'createdAt'>): Promise<PerformanceMetric> {\n    const [newMetric] = await db.insert(performanceMetrics).values(metric).returning();\n    return newMetric;\n  }\n\n  async getAssessmentMetrics(assessmentId: string): Promise<PerformanceMetric[]> {\n    return db.select().from(performanceMetrics)\n      .where(eq(performanceMetrics.assessmentId, assessmentId));\n  }\n\n  // Achievements\n  async getAllAchievements(): Promise<Achievement[]> {\n    return db.select().from(achievements)\n      .where(eq(achievements.isActive, true))\n      .orderBy(achievements.category, achievements.name);\n  }\n\n  async getUserAchievements(athleteId: string): Promise<UserAchievement[]> {\n    return db.select().from(userAchievements)\n      .where(eq(userAchievements.athleteId, athleteId))\n      .orderBy(desc(userAchievements.unlockedAt));\n  }\n\n  async unlockAchievement(athleteId: string, achievementId: string): Promise<UserAchievement> {\n    const [newAchievement] = await db.insert(userAchievements)\n      .values({ athleteId, achievementId })\n      .returning();\n    return newAchievement;\n  }\n\n  // Scout operations\n  async recordScoutView(scoutId: string, athleteId: string, duration = 0): Promise<void> {\n    await db.insert(scoutViews).values({\n      scoutId,\n      athleteId,\n      duration,\n    });\n  }\n\n  async getScoutActivity(scoutId: string): Promise<any[]> {\n    return db.select({\n      athleteId: scoutViews.athleteId,\n      viewedAt: scoutViews.viewedAt,\n      duration: scoutViews.duration,\n    }).from(scoutViews)\n      .where(eq(scoutViews.scoutId, scoutId))\n      .orderBy(desc(scoutViews.viewedAt))\n      .limit(50);\n  }\n\n  // Leaderboards\n  async getLeaderboard(sport?: string, metric?: string, limit = 20): Promise<any[]> {\n    // This is a complex query that would join multiple tables\n    // For now, return top athletes by overall rating\n    const baseQuery = db.select({\n      athleteId: athletes.id,\n      athleteName: sql`${users.firstName} || ' ' || ${users.lastName}`,\n      sport: athletes.primarySport,\n      location: athletes.location,\n      rating: athletes.overallRating,\n    }).from(athletes)\n      .innerJoin(users, eq(athletes.userId, users.id));\n\n    if (sport) {\n      return baseQuery\n        .where(eq(athletes.primarySport, sport))\n        .orderBy(desc(athletes.overallRating))\n        .limit(limit);\n    }\n\n    return baseQuery\n      .orderBy(desc(athletes.overallRating))\n      .limit(limit);\n  }\n\n  // Kala Pradarshan (Public Video Showcase) operations\n  async createKalaPradarshanVideo(videoData: InsertKalaPradarshanVideo): Promise<KalaPradarshanVideo> {\n    const [video] = await db.insert(kalaPradarshanVideos).values(videoData).returning();\n    return video;\n  }\n\n  async getKalaPradarshanVideos(limit = 20, offset = 0, sport?: string): Promise<KalaPradarshanVideo[]> {\n    const baseCondition = and(\n      eq(kalaPradarshanVideos.isPublic, true),\n      eq(kalaPradarshanVideos.isApproved, true)\n    );\n\n    const finalCondition = sport \n      ? and(baseCondition, eq(kalaPradarshanVideos.sport, sport))\n      : baseCondition;\n\n    return db.select().from(kalaPradarshanVideos)\n      .where(finalCondition)\n      .orderBy(desc(kalaPradarshanVideos.createdAt))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async getKalaPradarshanVideoById(id: string): Promise<KalaPradarshanVideo | undefined> {\n    const [video] = await db.select().from(kalaPradarshanVideos).where(eq(kalaPradarshanVideos.id, id));\n    return video;\n  }\n\n  async incrementVideoViews(id: string): Promise<void> {\n    await db.update(kalaPradarshanVideos)\n      .set({ views: sql`${kalaPradarshanVideos.views} + 1` })\n      .where(eq(kalaPradarshanVideos.id, id));\n  }\n\n  async incrementVideoLikes(id: string): Promise<void> {\n    await db.update(kalaPradarshanVideos)\n      .set({ likes: sql`${kalaPradarshanVideos.likes} + 1` })\n      .where(eq(kalaPradarshanVideos.id, id));\n  }\n\n  async getUserKalaPradarshanVideos(userId: string): Promise<KalaPradarshanVideo[]> {\n    return db.select().from(kalaPradarshanVideos)\n      .where(eq(kalaPradarshanVideos.userId, userId))\n      .orderBy(desc(kalaPradarshanVideos.createdAt));\n  }\n\n  // File operations\n  async uploadFile(tempFilePath: string, targetPath: string): Promise<string> {\n    try {\n      // Split path into directory and basename\n      const pathParts = targetPath.split('/');\n      const basename = pathParts.pop() || '';\n      const directory = pathParts.join('/');\n      \n      // Critical security checks for directory\n      if (path.isAbsolute(directory)) {\n        throw new Error('Absolute paths not allowed');\n      }\n      if (directory.includes('..')) {\n        throw new Error('Path traversal not allowed');\n      }\n      if (!/^[a-zA-Z0-9_-]+(?:\\/[a-zA-Z0-9_-]+)*$/.test(directory)) {\n        throw new Error('Invalid directory path');\n      }\n      \n      // Sanitize only the basename\n      const sanitizedBasename = basename.replace(/[^a-zA-Z0-9.-]/g, '_').substring(0, 100);\n      \n      // Create secure paths\n      const uploadsRoot = path.resolve('./uploads');\n      const targetDir = path.resolve(uploadsRoot, directory);\n      const finalPath = path.join(targetDir, sanitizedBasename);\n      \n      // CRITICAL: Ensure target is within uploads root\n      if (!targetDir.startsWith(uploadsRoot + path.sep) && targetDir !== uploadsRoot) {\n        throw new Error('Path escape attempt detected');\n      }\n      \n      // Ensure the directory exists\n      await fs.mkdir(targetDir, { recursive: true });\n      \n      // Move file (more efficient than read/write)\n      await fs.rename(tempFilePath, finalPath);\n      \n      // Return the URL path for serving the file\n      return `/uploads/${directory}/${sanitizedBasename}`;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw new Error('Failed to upload file');\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":12952},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  uuid\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table - required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - required for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").notNull().default(\"athlete\"), // athlete, scout, admin\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Athlete profiles with detailed information\nexport const athletes = pgTable(\"athletes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  age: integer(\"age\"),\n  height: decimal(\"height\", { precision: 5, scale: 2 }), // in cm\n  weight: decimal(\"weight\", { precision: 5, scale: 2 }), // in kg\n  location: varchar(\"location\"),\n  state: varchar(\"state\"),\n  primarySport: varchar(\"primary_sport\"),\n  secondarySports: text(\"secondary_sports\").array(),\n  preferredLanguage: varchar(\"preferred_language\").default(\"en\"),\n  bio: text(\"bio\"),\n  achievements: text(\"achievements\").array(),\n  isVerified: boolean(\"is_verified\").default(false),\n  overallRating: decimal(\"overall_rating\", { precision: 3, scale: 1 }).default(\"0.0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Test types available in the platform\nexport const testTypes = pgTable(\"test_types\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\").notNull(), // speed, agility, strength, endurance\n  instructions: text(\"instructions\"),\n  equipmentRequired: text(\"equipment_required\").array(),\n  estimatedDuration: integer(\"estimated_duration\"), // in minutes\n  difficultyLevel: varchar(\"difficulty_level\"), // beginner, intermediate, advanced\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Individual assessment sessions\nexport const assessments = pgTable(\"assessments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  athleteId: uuid(\"athlete_id\").notNull().references(() => athletes.id),\n  testTypeId: uuid(\"test_type_id\").notNull().references(() => testTypes.id),\n  videoUrl: varchar(\"video_url\"),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, processing, completed, failed\n  aiAnalysisResults: jsonb(\"ai_analysis_results\"),\n  performanceScore: decimal(\"performance_score\", { precision: 5, scale: 2 }),\n  feedback: text(\"feedback\"),\n  duration: integer(\"duration\"), // in seconds\n  metadata: jsonb(\"metadata\"), // additional data like device info, conditions\n  isVerified: boolean(\"is_verified\").default(false),\n  verifiedBy: varchar(\"verified_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Detailed performance metrics for each assessment\nexport const performanceMetrics = pgTable(\"performance_metrics\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  assessmentId: uuid(\"assessment_id\").notNull().references(() => assessments.id),\n  metricName: varchar(\"metric_name\").notNull(), // speed, jump_height, form_score, etc.\n  value: decimal(\"value\", { precision: 10, scale: 4 }).notNull(),\n  unit: varchar(\"unit\"), // m/s, cm, degrees, percentage\n  percentile: decimal(\"percentile\", { precision: 5, scale: 2 }), // compared to age group\n  confidence: decimal(\"confidence\", { precision: 3, scale: 2 }), // AI confidence score\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Achievement badges and milestones\nexport const achievements = pgTable(\"achievements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  icon: varchar(\"icon\"),\n  category: varchar(\"category\"), // performance, consistency, milestone\n  criteria: jsonb(\"criteria\"), // conditions to unlock\n  rarity: varchar(\"rarity\").default(\"common\"), // common, rare, epic, legendary\n  points: integer(\"points\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User achievements tracking\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  athleteId: uuid(\"athlete_id\").notNull().references(() => athletes.id),\n  achievementId: uuid(\"achievement_id\").notNull().references(() => achievements.id),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n  progress: decimal(\"progress\", { precision: 5, scale: 2 }).default(\"100.0\"), // if partially completed\n});\n\n// Scout views and interactions\nexport const scoutViews = pgTable(\"scout_views\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  scoutId: varchar(\"scout_id\").notNull().references(() => users.id),\n  athleteId: uuid(\"athlete_id\").notNull().references(() => athletes.id),\n  viewedAt: timestamp(\"viewed_at\").defaultNow(),\n  duration: integer(\"duration\"), // time spent viewing profile\n  interactions: jsonb(\"interactions\"), // bookmarks, notes, ratings\n});\n\n// Training plans and recommendations\nexport const trainingPlans = pgTable(\"training_plans\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  athleteId: uuid(\"athlete_id\").notNull().references(() => athletes.id),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  goals: text(\"goals\").array(),\n  duration: integer(\"duration\"), // in weeks\n  exercises: jsonb(\"exercises\"),\n  aiGenerated: boolean(\"ai_generated\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Kala Pradarshan - Public video showcase\nexport const kalaPradarshanVideos = pgTable(\"kala_pradarshan_videos\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  sport: varchar(\"sport\").notNull(),\n  videoUrl: varchar(\"video_url\").notNull(),\n  thumbnailUrl: varchar(\"thumbnail_url\"),\n  duration: integer(\"duration\"), // in seconds\n  views: integer(\"views\").default(0),\n  likes: integer(\"likes\").default(0),\n  isPublic: boolean(\"is_public\").default(true),\n  isApproved: boolean(\"is_approved\").default(true), // for moderation\n  metadata: jsonb(\"metadata\"), // additional video info\n  tags: text(\"tags\").array(), // for search/filtering\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  athlete: one(athletes, {\n    fields: [users.id],\n    references: [athletes.userId],\n  }),\n  scoutViews: many(scoutViews),\n  kalaPradarshanVideos: many(kalaPradarshanVideos),\n}));\n\nexport const athletesRelations = relations(athletes, ({ one, many }) => ({\n  user: one(users, {\n    fields: [athletes.userId],\n    references: [users.id],\n  }),\n  assessments: many(assessments),\n  achievements: many(userAchievements),\n  scoutViews: many(scoutViews),\n  trainingPlans: many(trainingPlans),\n}));\n\nexport const assessmentsRelations = relations(assessments, ({ one, many }) => ({\n  athlete: one(athletes, {\n    fields: [assessments.athleteId],\n    references: [athletes.id],\n  }),\n  testType: one(testTypes, {\n    fields: [assessments.testTypeId],\n    references: [testTypes.id],\n  }),\n  metrics: many(performanceMetrics),\n}));\n\nexport const performanceMetricsRelations = relations(performanceMetrics, ({ one }) => ({\n  assessment: one(assessments, {\n    fields: [performanceMetrics.assessmentId],\n    references: [assessments.id],\n  }),\n}));\n\nexport const userAchievementsRelations = relations(userAchievements, ({ one }) => ({\n  athlete: one(athletes, {\n    fields: [userAchievements.athleteId],\n    references: [athletes.id],\n  }),\n  achievement: one(achievements, {\n    fields: [userAchievements.achievementId],\n    references: [achievements.id],\n  }),\n}));\n\nexport const scoutViewsRelations = relations(scoutViews, ({ one }) => ({\n  scout: one(users, {\n    fields: [scoutViews.scoutId],\n    references: [users.id],\n  }),\n  athlete: one(athletes, {\n    fields: [scoutViews.athleteId],\n    references: [athletes.id],\n  }),\n}));\n\nexport const trainingPlansRelations = relations(trainingPlans, ({ one }) => ({\n  athlete: one(athletes, {\n    fields: [trainingPlans.athleteId],\n    references: [athletes.id],\n  }),\n}));\n\nexport const kalaPradarshanVideosRelations = relations(kalaPradarshanVideos, ({ one }) => ({\n  user: one(users, {\n    fields: [kalaPradarshanVideos.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  role: true,\n});\n\nexport const insertAthleteSchema = createInsertSchema(athletes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  overallRating: true,\n  isVerified: true,\n});\n\nexport const insertAssessmentSchema = createInsertSchema(assessments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  status: true,\n  isVerified: true,\n  verifiedBy: true,\n});\n\nexport const insertTestTypeSchema = createInsertSchema(testTypes).omit({\n  id: true,\n  createdAt: true,\n  isActive: true,\n});\n\nexport const insertKalaPradarshanVideoSchema = createInsertSchema(kalaPradarshanVideos).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  views: true,\n  likes: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertAthlete = z.infer<typeof insertAthleteSchema>;\nexport type Athlete = typeof athletes.$inferSelect;\nexport type InsertAssessment = z.infer<typeof insertAssessmentSchema>;\nexport type Assessment = typeof assessments.$inferSelect;\nexport type TestType = typeof testTypes.$inferSelect;\nexport type PerformanceMetric = typeof performanceMetrics.$inferSelect;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\nexport type ScoutView = typeof scoutViews.$inferSelect;\nexport type TrainingPlan = typeof trainingPlans.$inferSelect;\nexport type InsertKalaPradarshanVideo = z.infer<typeof insertKalaPradarshanVideoSchema>;\nexport type KalaPradarshanVideo = typeof kalaPradarshanVideos.$inferSelect;\n","size_bytes":11183},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport AthleteDashboard from \"@/pages/athlete-dashboard\";\nimport ScoutDashboard from \"@/pages/scout-dashboard\";\nimport AthleteProfile from \"@/pages/athlete-profile\";\nimport Assessment from \"@/pages/assessment\";\nimport VideoRecording from \"@/pages/video-recording\";\nimport Results from \"@/pages/results\";\nimport Leaderboard from \"@/pages/leaderboard\";\n\nfunction Router() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"spinner mb-4\"></div>\n          <h2 className=\"text-xl font-heading font-bold text-primary\">KALA KAUSHAL</h2>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          {/* Route based on user role */}\n          <Route path=\"/\" component={(user as any)?.role === 'scout' ? ScoutDashboard : AthleteDashboard} />\n          {/* Explicit dashboard routes */}\n          <Route path=\"/athlete-dashboard\" component={AthleteDashboard} />\n          <Route path=\"/scout-dashboard\" component={ScoutDashboard} />\n          <Route path=\"/athlete/:id\" component={AthleteProfile} />\n          <Route path=\"/assessment\" component={Assessment} />\n          <Route path=\"/assessment/:id/record\" component={VideoRecording} />\n          <Route path=\"/results/:id\" component={Results} />\n          <Route path=\"/leaderboard\" component={Leaderboard} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2348},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@600;700&family=Inter:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Enhanced Kala Kaushal Brand Colors */\n  --background: hsl(0 0% 4%);\n  --foreground: hsl(0 0% 92%);\n  --card: hsl(217 15% 8%);\n  --card-foreground: hsl(0 0% 92%);\n  --popover: hsl(217 15% 6%);\n  --popover-foreground: hsl(0 0% 92%);\n  --primary: hsl(214 95% 62%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(32 95% 55%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(217 12% 18%);\n  --muted-foreground: hsl(0 0% 68%);\n  --accent: hsl(145 90% 48%);\n  --accent-foreground: hsl(0 0% 100%);\n  --success: hsl(145 90% 48%);\n  --success-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 75% 55%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(217 12% 25%);\n  --input: hsl(217 15% 12%);\n  --ring: hsl(214 95% 62%);\n  --chart-1: hsl(214 100% 59%);\n  --chart-2: hsl(32 100% 50%);\n  --chart-3: hsl(145 100% 45%);\n  --chart-4: hsl(0 62% 50%);\n  --chart-5: hsl(280 100% 50%);\n  --sidebar: hsl(0 0% 12%);\n  --sidebar-foreground: hsl(0 0% 88%);\n  --sidebar-primary: hsl(214 100% 59%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 0% 15%);\n  --sidebar-accent-foreground: hsl(214 100% 59%);\n  --sidebar-border: hsl(0 0% 20%);\n  --sidebar-ring: hsl(214 100% 59%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-heading: \"Montserrat\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(214 100% 59% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(214 100% 59% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(214 100% 59% / 0.00), 0px 1px 2px -1px hsl(214 100% 59% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(214 100% 59% / 0.00), 0px 1px 2px -1px hsl(214 100% 59% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(214 100% 59% / 0.00), 0px 2px 4px -1px hsl(214 100% 59% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(214 100% 59% / 0.00), 0px 4px 6px -1px hsl(214 100% 59% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(214 100% 59% / 0.00), 0px 8px 10px -1px hsl(214 100% 59% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(214 100% 59% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 7%);\n  --foreground: hsl(0 0% 88%);\n  --card: hsl(0 0% 12%);\n  --card-foreground: hsl(0 0% 88%);\n  --popover: hsl(0 0% 7%);\n  --popover-foreground: hsl(0 0% 88%);\n  --primary: hsl(214 100% 59%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(32 100% 50%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 15%);\n  --muted-foreground: hsl(0 0% 65%);\n  --accent: hsl(145 100% 45%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 62% 50%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 20%);\n  --input: hsl(0 0% 15%);\n  --ring: hsl(214 100% 59%);\n  --chart-1: hsl(214 100% 59%);\n  --chart-2: hsl(32 100% 50%);\n  --chart-3: hsl(145 100% 45%);\n  --chart-4: hsl(0 62% 50%);\n  --chart-5: hsl(280 100% 50%);\n  --sidebar: hsl(0 0% 12%);\n  --sidebar-foreground: hsl(0 0% 88%);\n  --sidebar-primary: hsl(214 100% 59%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 0% 15%);\n  --sidebar-accent-foreground: hsl(214 100% 59%);\n  --sidebar-border: hsl(0 0% 20%);\n  --sidebar-ring: hsl(214 100% 59%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    overflow-x: hidden;\n    background-image: \n      radial-gradient(circle at 20% 20%, hsl(214 95% 62% / 0.05) 0%, transparent 50%),\n      radial-gradient(circle at 80% 80%, hsl(32 95% 55% / 0.03) 0%, transparent 50%),\n      radial-gradient(circle at 40% 40%, hsl(145 90% 48% / 0.02) 0%, transparent 50%);\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    @apply font-heading;\n    text-shadow: 0 0 30px hsl(var(--primary) / 0.3);\n  }\n  \n  /* Enhanced typography hierarchy */\n  h1 {\n    @apply text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight;\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)), hsl(var(--accent)));\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-size: 300% 300%;\n    animation: gradientShift 6s ease infinite;\n  }\n  \n  h2 {\n    @apply text-2xl md:text-3xl lg:text-4xl font-bold;\n  }\n  \n  h3 {\n    @apply text-xl md:text-2xl font-semibold;\n  }\n}\n\n@layer components {\n  .glow-border {\n    border: 2px solid transparent;\n    background: linear-gradient(hsl(var(--card)), hsl(var(--card))) padding-box,\n                linear-gradient(45deg, hsl(var(--primary)), hsl(var(--secondary))) border-box;\n    border-radius: var(--radius);\n  }\n\n  .hover-glow {\n    /* Animations handled by framer-motion MotionCard - removed conflicting CSS */\n  }\n\n  .particle {\n    position: absolute;\n    width: 3px;\n    height: 3px;\n    background: hsl(var(--primary));\n    border-radius: 50%;\n    pointer-events: none;\n  }\n\n  .typewriter {\n    overflow: hidden;\n    border-right: 2px solid hsl(var(--primary));\n    white-space: nowrap;\n    animation: typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite;\n  }\n\n  .progress-ring {\n    stroke-dasharray: 283;\n    stroke-dashoffset: 283;\n    transition: stroke-dashoffset 1s ease-out;\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 3s ease-in-out infinite;\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.5s ease-out;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.8s ease-out;\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.3s ease-out;\n  }\n\n  .nav-mobile {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 50;\n  }\n\n  @media (min-width: 768px) {\n    .nav-mobile {\n      display: none;\n    }\n  }\n}\n\n@keyframes glow {\n  from { \n    opacity: 0.8;\n    filter: drop-shadow(0 0 8px hsl(var(--primary) / 0.5));\n  }\n  to { \n    opacity: 1;\n    filter: drop-shadow(0 0 12px hsl(var(--primary) / 0.7));\n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-10px); \n  }\n}\n\n@keyframes slideUp {\n  from { \n    transform: translateY(20px); \n    opacity: 0; \n  }\n  to { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n  }\n  to { \n    opacity: 1; \n  }\n}\n\n@keyframes scaleIn {\n  from { \n    transform: scale(0.9); \n    opacity: 0; \n  }\n  to { \n    transform: scale(1); \n    opacity: 1; \n  }\n}\n\n@keyframes typing {\n  from { \n    width: 0 \n  }\n  to { \n    width: 100% \n  }\n}\n\n@keyframes blink-caret {\n  from, to { \n    border-color: transparent \n  }\n  50% { \n    border-color: hsl(var(--primary)) \n  }\n}\n\n/* Enhanced custom scrollbar */\n::-webkit-scrollbar {\n  width: 12px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n  border-radius: 6px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(45deg, hsl(var(--primary)), hsl(var(--secondary)));\n  border-radius: 6px;\n  border: 2px solid hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(45deg, hsl(var(--primary) / 0.9), hsl(var(--secondary) / 0.9));\n  box-shadow: 0 0 10px hsl(var(--primary) / 0.5);\n}\n\n/* Video recording overlay styles */\n.recording-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(\n    45deg,\n    transparent 40%,\n    hsl(var(--primary) / 0.1) 50%,\n    transparent 60%\n  );\n  pointer-events: none;\n}\n\n.skeleton-overlay {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 200px;\n  height: 300px;\n  border: 2px solid hsl(var(--accent));\n  border-radius: 8px;\n  background: hsl(var(--accent) / 0.1);\n  animation: pulse 2s ease-in-out infinite;\n}\n\n/* Achievement badge animations */\n.badge-unlock {\n  animation: badgeUnlock 0.6s ease-out;\n}\n\n@keyframes badgeUnlock {\n  0% {\n    transform: scale(0) rotate(-180deg);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.2) rotate(10deg);\n  }\n  100% {\n    transform: scale(1) rotate(0deg);\n    opacity: 1;\n  }\n}\n\n/* Performance chart animations */\n.chart-bar {\n  animation: chartGrow 1s ease-out;\n}\n\n@keyframes chartGrow {\n  from {\n    height: 0;\n  }\n  to {\n    height: 100%;\n  }\n}\n\n/* Ripple effect for buttons */\n.ripple {\n  position: relative;\n  overflow: hidden;\n}\n\n.ripple::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-radius: 50%;\n  background: hsl(var(--primary-foreground) / 0.3);\n  transform: translate(-50%, -50%);\n  transition: width 0.6s, height 0.6s;\n}\n\n.ripple:active::before {\n  width: 300px;\n  height: 300px;\n}\n\n/* Loading spinner */\n.spinner {\n  width: 24px;\n  height: 24px;\n  border: 2px solid hsl(var(--muted));\n  border-top: 2px solid hsl(var(--primary));\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Form field focus styles */\n.form-field:focus {\n  outline: none;\n  box-shadow: 0 0 0 2px hsl(var(--ring));\n}\n\n/* Card hover effects - optimized */\n@media (prefers-reduced-motion: no-preference) {\n  .athlete-card {\n    transition: transform 0.2s ease;\n  }\n  \n  .athlete-card:hover {\n    transform: translateY(-4px);\n    filter: drop-shadow(0 8px 16px hsl(var(--primary) / 0.3));\n  }\n}\n\n/* Test selection card bounce animation */\n.test-card {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.test-card:hover {\n  transform: scale(1.05);\n  animation: bounce 0.6s ease-in-out;\n}\n\n@keyframes bounce {\n  0%, 20%, 53%, 80%, 100% {\n    transform: scale(1.05) translateY(0);\n  }\n  40%, 43% {\n    transform: scale(1.05) translateY(-8px);\n  }\n  70% {\n    transform: scale(1.05) translateY(-4px);\n  }\n  90% {\n    transform: scale(1.05) translateY(-2px);\n  }\n}\n\n/* Enhanced micro-interactions - animations handled by framer-motion */\n.enhanced-hover {\n  position: relative;\n  overflow: hidden;\n  /* Removed conflicting CSS animations - handled by MotionCard */\n}\n\n/* Staggered animations - handled by MotionCard delay prop */\n.stagger-item {\n  /* Animations handled by framer-motion MotionCard delay prop */\n}\n\n/* Magnetic button effect - performance optimized */\n@media (prefers-reduced-motion: no-preference) {\n  .magnetic-btn {\n    transition: transform 0.2s cubic-bezier(0.23, 1, 0.32, 1);\n    position: relative;\n    will-change: transform;\n  }\n\n  .magnetic-btn:hover {\n    transform: translateY(-3px);\n    filter: drop-shadow(0 6px 20px hsl(var(--primary) / 0.4));\n  }\n\n  .magnetic-btn:active {\n    transform: translateY(-1px);\n    transition: transform 0.1s ease;\n  }\n}\n\n/* Progress bar animations */\n.progress-enhanced {\n  position: relative;\n  overflow: hidden;\n  background: hsl(var(--muted));\n  border-radius: 10px;\n}\n\n.progress-enhanced::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(\n    90deg,\n    transparent,\n    rgba(255, 255, 255, 0.3),\n    transparent\n  );\n  animation: progressShimmer 2s infinite;\n}\n\n@keyframes progressShimmer {\n  0% { left: -100%; }\n  100% { left: 100%; }\n}\n\n/* Card stack animation */\n.card-stack {\n  perspective: 1000px;\n}\n\n.card-stack-item {\n  transition: all 0.4s cubic-bezier(0.23, 1, 0.32, 1);\n  transform-style: preserve-3d;\n}\n\n.card-stack:hover .card-stack-item:nth-child(1) {\n  transform: translateZ(30px) rotateX(5deg);\n}\n\n.card-stack:hover .card-stack-item:nth-child(2) {\n  transform: translateZ(20px) rotateX(3deg);\n}\n\n.card-stack:hover .card-stack-item:nth-child(3) {\n  transform: translateZ(10px) rotateX(1deg);\n}\n\n/* Loading state animations */\n.loading-pulse {\n  animation: loadingPulse 1.5s ease-in-out infinite;\n}\n\n@keyframes loadingPulse {\n  0%, 100% {\n    opacity: 0.6;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n}\n\n/* Success state animation */\n.success-bounce {\n  animation: successBounce 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n}\n\n@keyframes successBounce {\n  0% {\n    transform: scale(0);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n/* Breathing animation for important elements */\n.breathe {\n  animation: breathe 3s ease-in-out infinite;\n}\n\n@keyframes breathe {\n  0%, 100% {\n    transform: scale(1);\n    opacity: 0.8;\n  }\n  50% {\n    transform: scale(1.03);\n    opacity: 1;\n  }\n}\n\n/* Gradient border animation */\n.gradient-border {\n  position: relative;\n  background: hsl(var(--card));\n  border-radius: var(--radius);\n}\n\n.gradient-border::before {\n  content: '';\n  position: absolute;\n  inset: 0;\n  padding: 2px;\n  background: linear-gradient(\n    45deg,\n    hsl(var(--primary)),\n    hsl(var(--secondary)),\n    hsl(var(--accent)),\n    hsl(var(--primary))\n  );\n  background-size: 200% 200%;\n  border-radius: var(--radius);\n  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n  mask-composite: xor;\n  animation: gradientRotate 3s ease infinite;\n}\n\n@keyframes gradientRotate {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n/* Text reveal animation */\n.text-reveal {\n  overflow: hidden;\n}\n\n.text-reveal-item {\n  display: inline-block;\n  opacity: 0;\n  transform: translateY(100%);\n  animation: textReveal 0.8s cubic-bezier(0.23, 1, 0.32, 1) forwards;\n}\n\n@keyframes textReveal {\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Interactive glow effect - optimized for performance */\n.interactive-glow {\n  position: relative;\n  /* Removed conflicting transitions - handled by framer-motion */\n}\n\n.interactive-glow::before {\n  content: '';\n  position: absolute;\n  inset: -2px;\n  border-radius: inherit;\n  background: linear-gradient(\n    45deg,\n    hsl(var(--primary) / 0.6),\n    hsl(var(--secondary) / 0.6),\n    hsl(var(--accent) / 0.6)\n  );\n  opacity: 0;\n  z-index: -1;\n  filter: blur(8px);\n  will-change: opacity;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .interactive-glow::before {\n    transition: opacity 0.2s ease;\n  }\n  \n  .interactive-glow:hover::before {\n    opacity: 1;\n  }\n}\n\n/* Number counter animation */\n.counter {\n  animation: counterUp 2s ease-out;\n}\n\n@keyframes counterUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Gradient text animation */\n@keyframes gradientShift {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n/* Enhanced glass morphism effect */\n.glass-morphism {\n  backdrop-filter: blur(16px) saturate(180%);\n  background: linear-gradient(135deg, hsl(var(--card) / 0.8), hsl(var(--card) / 0.4));\n  border: 1px solid hsl(var(--border) / 0.3);\n  box-shadow: \n    0 8px 32px hsl(var(--primary) / 0.1),\n    inset 0 1px 0 hsl(var(--foreground) / 0.1);\n}\n\n/* Enhanced button styles */\n.btn-primary {\n  background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary) / 0.8));\n  border: none;\n  color: hsl(var(--primary-foreground));\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.btn-primary::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, hsl(var(--primary-foreground) / 0.2), transparent);\n  transition: left 0.5s ease;\n}\n\n.btn-primary:hover::before {\n  left: 100%;\n}\n\n.btn-primary:hover {\n  box-shadow: 0 8px 25px hsl(var(--primary) / 0.4);\n  transform: translateY(-2px);\n}\n\n/* Enhanced card styles */\n.card-enhanced {\n  background: linear-gradient(135deg, hsl(var(--card)), hsl(var(--card) / 0.9));\n  border: 1px solid hsl(var(--border));\n  position: relative;\n  overflow: hidden;\n}\n\n.card-enhanced::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 1px;\n  background: linear-gradient(90deg, transparent, hsl(var(--primary) / 0.5), transparent);\n}\n\n/* Status indicator animations */\n.status-online {\n  position: relative;\n}\n\n.status-online::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 100%;\n  height: 100%;\n  background: hsl(var(--success));\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n  animation: pulse 2s infinite;\n  opacity: 0.3;\n}\n","size_bytes":16490},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY || \"default_key\" \n});\n\nexport interface VideoAnalysisResult {\n  performanceScore: number;\n  metrics: {\n    name: string;\n    value: number;\n    unit: string;\n    confidence: number;\n  }[];\n  feedback: string;\n  formAnalysis: {\n    overallForm: number;\n    improvements: string[];\n    strengths: string[];\n  };\n  detectedMovements: string[];\n  riskFactors: string[];\n}\n\nexport interface PoseAnalysisResult {\n  jointAngles: Record<string, number>;\n  bodyPosture: string;\n  movementQuality: number;\n  technicalFeedback: string[];\n}\n\nexport interface AthleteInsights {\n  overallAnalysis: string;\n  strengths: string[];\n  weaknesses: string[];\n  recommendations: string[];\n  potentialRating: number;\n  improvementAreas: {\n    area: string;\n    priority: 'high' | 'medium' | 'low';\n    recommendation: string;\n  }[];\n  comparisonToPeers: {\n    percentile: number;\n    description: string;\n  };\n}\n\nexport class VideoAnalysisService {\n  /**\n   * Analyze sports performance video using OpenAI's vision capabilities\n   */\n  async analyzePerformanceVideo(\n    base64Video: string, \n    testType: string,\n    athleteMetadata?: { age?: number; height?: number; weight?: number; sport?: string }\n  ): Promise<VideoAnalysisResult> {\n    try {\n      const prompt = this.buildAnalysisPrompt(testType, athleteMetadata);\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert sports performance analyst with computer vision capabilities. Analyze athletic movements with precision and provide actionable feedback.\"\n          },\n          {\n            role: \"user\",\n            content: [\n              {\n                type: \"text\",\n                text: prompt\n              },\n              {\n                type: \"image_url\",\n                image_url: {\n                  url: `data:video/mp4;base64,${base64Video}`\n                }\n              }\n            ],\n          },\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 1500,\n      });\n\n      const analysisResult = JSON.parse(response.choices[0].message.content || '{}');\n      \n      return {\n        performanceScore: Math.max(0, Math.min(100, analysisResult.performanceScore || 0)),\n        metrics: analysisResult.metrics || [],\n        feedback: analysisResult.feedback || \"Analysis completed\",\n        formAnalysis: {\n          overallForm: Math.max(0, Math.min(100, analysisResult.formAnalysis?.overallForm || 0)),\n          improvements: analysisResult.formAnalysis?.improvements || [],\n          strengths: analysisResult.formAnalysis?.strengths || [],\n        },\n        detectedMovements: analysisResult.detectedMovements || [],\n        riskFactors: analysisResult.riskFactors || [],\n      };\n    } catch (error) {\n      console.error(\"Video analysis failed:\", error);\n      throw new Error(\"Failed to analyze video: \" + (error as Error).message);\n    }\n  }\n\n  /**\n   * Analyze pose and biomechanics from a single frame\n   */\n  async analyzePoseFromFrame(base64Image: string, exerciseType: string): Promise<PoseAnalysisResult> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a biomechanics expert. Analyze body posture, joint angles, and movement quality from sports images.\"\n          },\n          {\n            role: \"user\",\n            content: [\n              {\n                type: \"text\",\n                text: `Analyze the athlete's pose and biomechanics in this ${exerciseType} image. Focus on joint angles, body alignment, and form quality. Provide specific technical feedback and measurements where possible. Respond in JSON format with: {\"jointAngles\": {}, \"bodyPosture\": \"\", \"movementQuality\": 0-100, \"technicalFeedback\": []}`\n              },\n              {\n                type: \"image_url\",\n                image_url: {\n                  url: `data:image/jpeg;base64,${base64Image}`\n                }\n              }\n            ],\n          },\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 800,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      \n      return {\n        jointAngles: result.jointAngles || {},\n        bodyPosture: result.bodyPosture || \"Unable to analyze posture\",\n        movementQuality: Math.max(0, Math.min(100, result.movementQuality || 0)),\n        technicalFeedback: result.technicalFeedback || [],\n      };\n    } catch (error) {\n      console.error(\"Pose analysis failed:\", error);\n      throw new Error(\"Failed to analyze pose: \" + (error as Error).message);\n    }\n  }\n\n  /**\n   * Generate comprehensive AI insights for an athlete\n   */\n  async generateAthleteInsights(\n    athleteData: any,\n    assessments: any[],\n    performanceMetrics: any[]\n  ): Promise<AthleteInsights> {\n    try {\n      const prompt = `\n        Analyze this athlete's complete profile and generate comprehensive insights:\n        \n        Athlete Profile: ${JSON.stringify(athleteData)}\n        Assessments: ${JSON.stringify(assessments)}\n        Performance Metrics: ${JSON.stringify(performanceMetrics)}\n        \n        Provide a detailed analysis including overall assessment, strengths, weaknesses, \n        specific recommendations, potential rating out of 10, improvement areas with priorities,\n        and comparison to peer athletes in their sport/age group.\n        \n        Format response as JSON: {\n          \"overallAnalysis\": \"string\",\n          \"strengths\": [\"string\"],\n          \"weaknesses\": [\"string\"], \n          \"recommendations\": [\"string\"],\n          \"potentialRating\": number,\n          \"improvementAreas\": [{\"area\": \"string\", \"priority\": \"high|medium|low\", \"recommendation\": \"string\"}],\n          \"comparisonToPeers\": {\"percentile\": number, \"description\": \"string\"}\n        }\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert sports scientist and talent scout with deep knowledge of athletic development. Provide insightful, data-driven analysis that helps identify potential and development opportunities.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          },\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 1200,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      \n      return {\n        overallAnalysis: result.overallAnalysis || \"Analysis completed\",\n        strengths: result.strengths || [],\n        weaknesses: result.weaknesses || [],\n        recommendations: result.recommendations || [],\n        potentialRating: Math.max(0, Math.min(10, result.potentialRating || 0)),\n        improvementAreas: result.improvementAreas || [],\n        comparisonToPeers: {\n          percentile: Math.max(0, Math.min(100, result.comparisonToPeers?.percentile || 50)),\n          description: result.comparisonToPeers?.description || \"Comparison data limited\"\n        }\n      };\n    } catch (error) {\n      console.error(\"AI insights generation failed:\", error);\n      throw new Error(\"Failed to generate AI insights: \" + (error as Error).message);\n    }\n  }\n\n  /**\n   * Generate personalized training recommendations\n   */\n  async generateTrainingRecommendations(\n    athleteData: any,\n    recentAssessments: any[],\n    goals: string[]\n  ): Promise<{ recommendations: string[]; exercises: any[]; timeline: string }> {\n    try {\n      const prompt = `\n        Based on the following athlete data and assessment history, generate personalized training recommendations:\n        \n        Athlete Profile: ${JSON.stringify(athleteData)}\n        Recent Assessments: ${JSON.stringify(recentAssessments)}\n        Goals: ${goals.join(', ')}\n        \n        Provide specific, actionable training recommendations, exercise suggestions, and a timeline.\n        Format response as JSON: {\"recommendations\": [], \"exercises\": [], \"timeline\": \"\"}\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a certified sports trainer and performance coach. Create evidence-based training plans.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          },\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 1000,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      \n      return {\n        recommendations: result.recommendations || [],\n        exercises: result.exercises || [],\n        timeline: result.timeline || \"4-6 weeks\",\n      };\n    } catch (error) {\n      console.error(\"Training recommendation generation failed:\", error);\n      throw new Error(\"Failed to generate recommendations: \" + (error as Error).message);\n    }\n  }\n\n  /**\n   * Build analysis prompt based on test type\n   */\n  private buildAnalysisPrompt(testType: string, metadata?: any): string {\n    const basePrompt = `Analyze this ${testType} performance video and provide detailed assessment.`;\n    \n    const testSpecificInstructions = {\n      'sprint': 'Focus on running form, acceleration, stride length, and speed consistency. Measure approximate speed if possible.',\n      'vertical_jump': 'Analyze jump height, takeoff technique, body positioning, and landing form. Estimate jump height in centimeters.',\n      'agility': 'Assess change of direction speed, body control, footwork, and movement efficiency.',\n      'strength': 'Evaluate form, range of motion, control, and execution quality.',\n      'endurance': 'Monitor consistency, pacing, form degradation, and cardiovascular efficiency.',\n    };\n\n    const specificInstructions = testSpecificInstructions[testType as keyof typeof testSpecificInstructions] || \n      'Analyze the athletic movement and provide performance insights.';\n\n    const metadataContext = metadata ? \n      `Consider athlete context: age ${metadata.age}, height ${metadata.height}cm, weight ${metadata.weight}kg, sport: ${metadata.sport}.` : '';\n\n    return `${basePrompt} ${specificInstructions} ${metadataContext}\n    \n    Respond in JSON format with:\n    {\n      \"performanceScore\": 0-100,\n      \"metrics\": [{\"name\": \"\", \"value\": 0, \"unit\": \"\", \"confidence\": 0-1}],\n      \"feedback\": \"detailed feedback text\",\n      \"formAnalysis\": {\n        \"overallForm\": 0-100,\n        \"improvements\": [\"list of areas to improve\"],\n        \"strengths\": [\"list of strengths observed\"]\n      },\n      \"detectedMovements\": [\"list of movements identified\"],\n      \"riskFactors\": [\"potential injury risks or form issues\"]\n    }`;\n  }\n\n  /**\n   * Validate video integrity and detect potential manipulation\n   */\n  async validateVideoIntegrity(base64Video: string): Promise<{ isValid: boolean; confidence: number; issues: string[] }> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a digital forensics expert. Detect signs of video manipulation, editing, or artificial enhancement.\"\n          },\n          {\n            role: \"user\",\n            content: [\n              {\n                type: \"text\",\n                text: \"Analyze this video for signs of digital manipulation, speed alteration, deepfakes, or other editing. Look for inconsistencies in lighting, motion blur, frame rates, or unnatural movements. Respond in JSON: {\\\"isValid\\\": boolean, \\\"confidence\\\": 0-1, \\\"issues\\\": []}\"\n              },\n              {\n                type: \"image_url\",\n                image_url: {\n                  url: `data:video/mp4;base64,${base64Video}`\n                }\n              }\n            ],\n          },\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 500,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      \n      return {\n        isValid: result.isValid ?? true,\n        confidence: Math.max(0, Math.min(1, result.confidence || 0.8)),\n        issues: result.issues || [],\n      };\n    } catch (error) {\n      console.error(\"Video integrity validation failed:\", error);\n      // Default to valid if analysis fails\n      return {\n        isValid: true,\n        confidence: 0.5,\n        issues: [\"Unable to validate video integrity\"]\n      };\n    }\n  }\n}\n\nexport const videoAnalysisService = new VideoAnalysisService();\n","size_bytes":12938},"client/src/components/athlete-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  MapPin, \n  Trophy, \n  Star, \n  Eye,\n  TrendingUp \n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface AthleteCardProps {\n  athlete: {\n    id: string;\n    userId?: string;\n    age?: number;\n    location?: string;\n    primarySport?: string;\n    overallRating?: string;\n    isVerified?: boolean;\n  };\n  showViewButton?: boolean;\n  index?: number;\n}\n\nexport default function AthleteCard({ \n  athlete, \n  showViewButton = true, \n  index = 0 \n}: AthleteCardProps) {\n  const overallRating = parseFloat(athlete.overallRating || \"0\");\n  const ratingStars = Math.floor(overallRating / 2); // Convert to 5-star scale\n  \n  // Mock performance metrics for demonstration\n  const performanceMetrics = [\n    { name: \"Speed\", value: Math.floor(Math.random() * 30) + 70 },\n    { name: \"Agility\", value: Math.floor(Math.random() * 30) + 70 },\n  ];\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, delay: index * 0.1 }}\n    >\n      <Card className=\"athlete-card glow-border hover-glow transition-all duration-300\">\n        <CardContent className=\"p-6\">\n          {/* Header */}\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <Avatar className=\"w-16 h-16 border-2 border-primary\">\n              <AvatarImage \n                src={`/athlete-${athlete.id?.slice(-1) || '1'}.jpg`} \n                alt=\"Athlete\" \n              />\n              <AvatarFallback className=\"bg-primary text-primary-foreground text-lg\">\n                {athlete.userId?.charAt(0)?.toUpperCase() || \"A\"}\n              </AvatarFallback>\n            </Avatar>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <h4 className=\"text-lg font-bold text-foreground truncate\">\n                  Athlete #{athlete.id?.slice(-4) || \"0000\"}\n                </h4>\n                {athlete.isVerified && (\n                  <Badge className=\"bg-accent text-accent-foreground px-2 py-0.5 text-xs\">\n                    <Trophy className=\"w-3 h-3 mr-1\" />\n                    Verified\n                  </Badge>\n                )}\n              </div>\n              \n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                {athlete.primarySport && (\n                  <>\n                    <Trophy className=\"w-3 h-3 mr-1\" />\n                    <span className=\"mr-2\">{athlete.primarySport}</span>\n                  </>\n                )}\n                {athlete.location && (\n                  <>\n                    <span className=\"mx-1\">•</span>\n                    <MapPin className=\"w-3 h-3 mr-1\" />\n                    <span>{athlete.location}</span>\n                  </>\n                )}\n              </div>\n              \n              <div className=\"flex items-center mt-1\">\n                <div className=\"flex text-secondary text-sm mr-2\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star\n                      key={i}\n                      className={`w-3 h-3 ${\n                        i < ratingStars \n                          ? \"text-secondary fill-current\" \n                          : \"text-muted-foreground\"\n                      }`}\n                    />\n                  ))}\n                </div>\n                <span className=\"text-muted-foreground text-sm\">\n                  {overallRating.toFixed(1)}/10\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Performance Metrics */}\n          <div className=\"space-y-3 mb-4\">\n            {performanceMetrics.map((metric, index) => (\n              <div key={metric.name}>\n                <div className=\"flex justify-between text-sm mb-1\">\n                  <span className=\"text-muted-foreground\">{metric.name}</span>\n                  <span className=\"text-foreground\">{metric.value}%</span>\n                </div>\n                <Progress \n                  value={metric.value} \n                  className=\"h-2\"\n                />\n              </div>\n            ))}\n          </div>\n\n          {/* Action Button */}\n          {showViewButton && (\n            <Link href={`/athlete/${athlete.id}`}>\n              <Button \n                className={`w-full text-sm transition-all ${\n                  overallRating >= 8 \n                    ? \"bg-accent/10 text-accent border-accent/30 hover:bg-accent/20\" \n                    : overallRating >= 6\n                    ? \"bg-primary/10 text-primary border-primary/30 hover:bg-primary/20\"\n                    : \"bg-secondary/10 text-secondary border-secondary/30 hover:bg-secondary/20\"\n                }`}\n                variant=\"outline\"\n                data-testid={`button-view-athlete-${athlete.id}`}\n              >\n                <Eye className=\"w-4 h-4 mr-2\" />\n                View Profile\n              </Button>\n            </Link>\n          )}\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":5358},"client/src/components/performance-chart.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  Area,\n  AreaChart \n} from \"recharts\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { TrendingUp, BarChart3, Calendar } from \"lucide-react\";\nimport { format, parseISO, subMonths, isAfter } from \"date-fns\";\n\ninterface Assessment {\n  id: string;\n  createdAt: string;\n  aiAnalysisResults?: {\n    performanceScore?: number;\n    metrics?: Array<{\n      name: string;\n      value: number;\n      unit: string;\n      confidence: number;\n    }>;\n  };\n}\n\ninterface PerformanceChartProps {\n  assessments?: Assessment[];\n  className?: string;\n}\n\ninterface ChartDataPoint {\n  month: string;\n  date: string;\n  performance: number;\n  speed: number;\n  agility: number;\n  endurance: number;\n  assessments: number;\n}\n\nexport default function PerformanceChart({ assessments = [], className }: PerformanceChartProps) {\n  const [chartType, setChartType] = useState<'line' | 'area'>('area');\n  const [timeRange, setTimeRange] = useState<'6m' | '1y' | 'all'>('6m');\n  \n  const data = useMemo(() => {\n    if (!assessments || assessments.length === 0) {\n      // Fallback to mock data if no assessments\n      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n      return months.map((month, index) => ({\n        month,\n        date: format(subMonths(new Date(), 5 - index), 'yyyy-MM-dd'),\n        performance: Math.floor(Math.random() * 20) + 70 + (index * 2),\n        speed: Math.floor(Math.random() * 15) + 75 + (index * 1.5),\n        agility: Math.floor(Math.random() * 18) + 68 + (index * 2),\n        endurance: Math.floor(Math.random() * 25) + 65 + (index * 3),\n        assessments: Math.floor(Math.random() * 5) + 2 + index,\n      }));\n    }\n\n    // Filter assessments by time range\n    const now = new Date();\n    const cutoffDate = timeRange === '6m' ? subMonths(now, 6) : \n                     timeRange === '1y' ? subMonths(now, 12) : \n                     new Date(0); // all time\n\n    const filteredAssessments = assessments\n      .filter(a => a.createdAt && isAfter(parseISO(a.createdAt), cutoffDate))\n      .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n\n    if (filteredAssessments.length === 0) {\n      return [];\n    }\n\n    // Group assessments by month\n    const monthGroups: { [key: string]: Assessment[] } = {};\n    \n    filteredAssessments.forEach(assessment => {\n      const monthKey = format(parseISO(assessment.createdAt), 'MMM yyyy');\n      if (!monthGroups[monthKey]) {\n        monthGroups[monthKey] = [];\n      }\n      monthGroups[monthKey].push(assessment);\n    });\n\n    // Convert to chart data\n    return Object.entries(monthGroups).map(([monthKey, monthAssessments]) => {\n      const performanceScores = monthAssessments\n        .map(a => a.aiAnalysisResults?.performanceScore || 0)\n        .filter(score => score > 0);\n      \n      // Extract specific metrics if available\n      const speedMetrics = monthAssessments\n        .flatMap(a => a.aiAnalysisResults?.metrics || [])\n        .filter(m => m.name.toLowerCase().includes('speed'))\n        .map(m => m.value);\n        \n      const agilityMetrics = monthAssessments\n        .flatMap(a => a.aiAnalysisResults?.metrics || [])\n        .filter(m => m.name.toLowerCase().includes('agility') || m.name.toLowerCase().includes('coordination'))\n        .map(m => m.value);\n        \n      const enduranceMetrics = monthAssessments\n        .flatMap(a => a.aiAnalysisResults?.metrics || [])\n        .filter(m => m.name.toLowerCase().includes('endurance') || m.name.toLowerCase().includes('stamina'))\n        .map(m => m.value);\n\n      const avgPerformance = performanceScores.length > 0 \n        ? performanceScores.reduce((sum, score) => sum + score, 0) / performanceScores.length \n        : 0;\n        \n      const avgSpeed = speedMetrics.length > 0 \n        ? speedMetrics.reduce((sum, val) => sum + val, 0) / speedMetrics.length \n        : avgPerformance + (Math.random() * 10 - 5); // Slight variation from performance if no specific speed data\n        \n      const avgAgility = agilityMetrics.length > 0 \n        ? agilityMetrics.reduce((sum, val) => sum + val, 0) / agilityMetrics.length \n        : avgPerformance + (Math.random() * 10 - 5);\n        \n      const avgEndurance = enduranceMetrics.length > 0 \n        ? enduranceMetrics.reduce((sum, val) => sum + val, 0) / enduranceMetrics.length \n        : avgPerformance + (Math.random() * 10 - 5);\n\n      return {\n        month: format(parseISO(monthAssessments[0].createdAt), 'MMM'),\n        date: monthAssessments[0].createdAt,\n        performance: Math.max(0, Math.min(100, avgPerformance)),\n        speed: Math.max(0, Math.min(100, avgSpeed)),\n        agility: Math.max(0, Math.min(100, avgAgility)),\n        endurance: Math.max(0, Math.min(100, avgEndurance)),\n        assessments: monthAssessments.length,\n      };\n    });\n  }, [assessments, timeRange]);\n\n  // Calculate performance metrics\n  const performanceMetrics = useMemo(() => {\n    if (data.length < 2) return { trend: 0, totalTests: 0, rank: 0 };\n    \n    const latest = data[data.length - 1];\n    const previous = data[data.length - 2];\n    const trend = ((latest.performance - previous.performance) / previous.performance) * 100;\n    const totalTests = data.reduce((sum, d) => sum + d.assessments, 0);\n    \n    // Mock rank calculation based on performance\n    const avgPerformance = data.reduce((sum, d) => sum + d.performance, 0) / data.length;\n    const rank = Math.max(1, Math.floor((100 - avgPerformance) * 50));\n    \n    return { trend, totalTests, rank };\n  }, [data]);\n\n  const customTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-card border border-border rounded-lg p-3 shadow-lg\">\n          <p className=\"text-sm font-medium text-foreground mb-2\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}: {entry.value}%\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Chart Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant={chartType === 'area' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setChartType('area')}\n            data-testid=\"button-chart-area\"\n          >\n            <BarChart3 className=\"w-4 h-4 mr-1\" />\n            Area\n          </Button>\n          <Button\n            variant={chartType === 'line' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setChartType('line')}\n            data-testid=\"button-chart-line\"\n          >\n            <TrendingUp className=\"w-4 h-4 mr-1\" />\n            Line\n          </Button>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant={timeRange === '6m' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setTimeRange('6m')}\n            data-testid=\"button-range-6m\"\n          >\n            6M\n          </Button>\n          <Button\n            variant={timeRange === '1y' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setTimeRange('1y')}\n            data-testid=\"button-range-1y\"\n          >\n            1Y\n          </Button>\n        </div>\n      </div>\n\n      {/* Chart */}\n      <div className=\"h-64 w-full\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          {chartType === 'area' ? (\n            <AreaChart data={data}>\n              <defs>\n                <linearGradient id=\"performanceGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"hsl(var(--primary))\" stopOpacity={0.3}/>\n                  <stop offset=\"95%\" stopColor=\"hsl(var(--primary))\" stopOpacity={0}/>\n                </linearGradient>\n                <linearGradient id=\"speedGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"hsl(var(--secondary))\" stopOpacity={0.3}/>\n                  <stop offset=\"95%\" stopColor=\"hsl(var(--secondary))\" stopOpacity={0}/>\n                </linearGradient>\n                <linearGradient id=\"agilityGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"hsl(var(--accent))\" stopOpacity={0.3}/>\n                  <stop offset=\"95%\" stopColor=\"hsl(var(--accent))\" stopOpacity={0}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid \n                strokeDasharray=\"3 3\" \n                stroke=\"hsl(var(--border))\" \n                opacity={0.3}\n              />\n              <XAxis \n                dataKey=\"month\" \n                stroke=\"hsl(var(--muted-foreground))\"\n                fontSize={12}\n              />\n              <YAxis \n                stroke=\"hsl(var(--muted-foreground))\"\n                fontSize={12}\n                domain={[60, 100]}\n              />\n              <Tooltip content={customTooltip} />\n              <Area\n                type=\"monotone\"\n                dataKey=\"performance\"\n                stroke=\"hsl(var(--primary))\"\n                strokeWidth={2}\n                fill=\"url(#performanceGradient)\"\n                name=\"Overall\"\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"speed\"\n                stroke=\"hsl(var(--secondary))\"\n                strokeWidth={2}\n                fill=\"url(#speedGradient)\"\n                name=\"Speed\"\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"agility\"\n                stroke=\"hsl(var(--accent))\"\n                strokeWidth={2}\n                fill=\"url(#agilityGradient)\"\n                name=\"Agility\"\n              />\n            </AreaChart>\n          ) : (\n            <LineChart data={data}>\n              <CartesianGrid \n                strokeDasharray=\"3 3\" \n                stroke=\"hsl(var(--border))\" \n                opacity={0.3}\n              />\n              <XAxis \n                dataKey=\"month\" \n                stroke=\"hsl(var(--muted-foreground))\"\n                fontSize={12}\n              />\n              <YAxis \n                stroke=\"hsl(var(--muted-foreground))\"\n                fontSize={12}\n                domain={[60, 100]}\n              />\n              <Tooltip content={customTooltip} />\n              <Line\n                type=\"monotone\"\n                dataKey=\"performance\"\n                stroke=\"hsl(var(--primary))\"\n                strokeWidth={3}\n                dot={{ fill: \"hsl(var(--primary))\", strokeWidth: 2, r: 4 }}\n                name=\"Overall\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"speed\"\n                stroke=\"hsl(var(--secondary))\"\n                strokeWidth={2}\n                dot={{ fill: \"hsl(var(--secondary))\", strokeWidth: 2, r: 3 }}\n                name=\"Speed\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"agility\"\n                stroke=\"hsl(var(--accent))\"\n                strokeWidth={2}\n                dot={{ fill: \"hsl(var(--accent))\", strokeWidth: 2, r: 3 }}\n                name=\"Agility\"\n              />\n            </LineChart>\n          )}\n        </ResponsiveContainer>\n      </div>\n\n      {/* Chart Legend */}\n      <div className=\"flex items-center justify-center gap-6 text-sm\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 rounded-full bg-primary\"></div>\n          <span className=\"text-muted-foreground\">Overall Performance</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 rounded-full bg-secondary\"></div>\n          <span className=\"text-muted-foreground\">Speed</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 rounded-full bg-accent\"></div>\n          <span className=\"text-muted-foreground\">Agility</span>\n        </div>\n      </div>\n\n      {/* Performance Summary */}\n      <div className=\"grid grid-cols-3 gap-4 pt-4 border-t border-border\">\n        <div className=\"text-center\">\n          <div className={`text-lg font-bold ${performanceMetrics.trend >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n            {performanceMetrics.trend > 0 ? '+' : ''}{performanceMetrics.trend.toFixed(1)}%\n          </div>\n          <div className=\"text-xs text-muted-foreground\">vs Last Period</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-lg font-bold text-secondary\" data-testid=\"text-total-tests\">\n            {performanceMetrics.totalTests}\n          </div>\n          <div className=\"text-xs text-muted-foreground\">Tests Completed</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-lg font-bold text-accent\" data-testid=\"text-performance-rank\">\n            #{performanceMetrics.rank}\n          </div>\n          <div className=\"text-xs text-muted-foreground\">Estimated Rank</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13373},"client/src/components/test-selection.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport GlowingButton from \"@/components/ui/glowing-button\";\nimport { \n  Play,\n  Clock,\n  Trophy,\n  Zap,\n  Target,\n  TrendingUp,\n  Layers,\n  ArrowUp\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface TestType {\n  id: string;\n  name: string;\n  description?: string;\n  category: string;\n  estimatedDuration?: number;\n  difficultyLevel?: string;\n  isActive: boolean;\n}\n\ninterface TestSelectionProps {\n  testTypes: TestType[];\n  onTestSelect?: (test: TestType) => void;\n  showStartButton?: boolean;\n}\n\nexport default function TestSelection({ \n  testTypes, \n  onTestSelect, \n  showStartButton = true \n}: TestSelectionProps) {\n  const getTestIcon = (category: string, name: string) => {\n    const lowerName = name.toLowerCase();\n    const lowerCategory = category.toLowerCase();\n    \n    if (lowerName.includes('sprint') || lowerName.includes('run')) {\n      return <Zap className=\"h-8 w-8 text-primary animate-float\" />;\n    }\n    if (lowerName.includes('jump') || lowerName.includes('vertical')) {\n      return <ArrowUp className=\"h-8 w-8 text-secondary animate-float\" />;\n    }\n    if (lowerCategory.includes('agility')) {\n      return <Target className=\"h-8 w-8 text-accent animate-float\" />;\n    }\n    if (lowerCategory.includes('strength')) {\n      return <Trophy className=\"h-8 w-8 text-primary animate-float\" />;\n    }\n    if (lowerCategory.includes('endurance')) {\n      return <TrendingUp className=\"h-8 w-8 text-secondary animate-float\" />;\n    }\n    \n    return <Layers className=\"h-8 w-8 text-primary animate-float\" />;\n  };\n\n  const getDifficultyColor = (difficulty?: string) => {\n    switch (difficulty?.toLowerCase()) {\n      case 'beginner':\n        return 'bg-accent/20 text-accent border-accent/30';\n      case 'intermediate':\n        return 'bg-secondary/20 text-secondary border-secondary/30';\n      case 'advanced':\n        return 'bg-destructive/20 text-destructive border-destructive/30';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'speed':\n        return 'bg-primary/10 text-primary';\n      case 'agility':\n        return 'bg-accent/10 text-accent';\n      case 'strength':\n        return 'bg-secondary/10 text-secondary';\n      case 'endurance':\n        return 'bg-primary/10 text-primary';\n      default:\n        return 'bg-muted/10 text-muted-foreground';\n    }\n  };\n\n  if (!testTypes || testTypes.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <Trophy className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-heading font-bold text-foreground mb-2\">\n          No Tests Available\n        </h3>\n        <p className=\"text-muted-foreground\">\n          Tests are being prepared and will be available soon.\n        </p>\n      </div>\n    );\n  }\n\n  const activeTests = testTypes.filter(test => test.isActive);\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {activeTests.map((test, index) => (\n        <motion.div\n          key={test.id}\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ \n            duration: 0.5, \n            delay: index * 0.1,\n            type: \"spring\",\n            stiffness: 200 \n          }}\n        >\n          <Card className=\"test-card glow-border hover-glow h-full cursor-pointer\">\n            <CardContent className=\"p-6\">\n              {/* Test Icon and Header */}\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-muted/50 rounded-lg flex items-center justify-center\">\n                  {getTestIcon(test.category, test.name)}\n                </div>\n                \n                <div className=\"flex flex-col gap-1\">\n                  <Badge \n                    variant=\"outline\" \n                    className={getCategoryColor(test.category)}\n                  >\n                    {test.category}\n                  </Badge>\n                  {test.difficultyLevel && (\n                    <Badge \n                      variant=\"outline\" \n                      className={getDifficultyColor(test.difficultyLevel)}\n                    >\n                      {test.difficultyLevel}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n\n              {/* Test Details */}\n              <div className=\"mb-4\">\n                <h3 className=\"text-lg font-heading font-bold text-foreground mb-2\">\n                  {test.name}\n                </h3>\n                <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                  {test.description || `Measure your ${test.category.toLowerCase()} performance with this ${test.difficultyLevel || 'standard'} assessment.`}\n                </p>\n              </div>\n\n              {/* Test Meta */}\n              {test.estimatedDuration && (\n                <div className=\"flex items-center text-sm text-muted-foreground mb-4\">\n                  <Clock className=\"w-4 h-4 mr-2\" />\n                  <span>~{test.estimatedDuration} minutes</span>\n                </div>\n              )}\n\n              {/* Action Button */}\n              {showStartButton && (\n                <div className=\"mt-auto\">\n                  {onTestSelect ? (\n                    <GlowingButton\n                      onClick={() => onTestSelect(test)}\n                      className=\"w-full\"\n                      data-testid={`button-select-test-${test.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      Select Test\n                    </GlowingButton>\n                  ) : (\n                    <Button \n                      className=\"w-full bg-primary/10 text-primary border-primary/30 hover:bg-primary/20\"\n                      variant=\"outline\"\n                      data-testid={`button-view-test-${test.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <Trophy className=\"w-4 h-4 mr-2\" />\n                      View Details\n                    </Button>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":6534},"client/src/components/video-recorder.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Square, RotateCcw } from \"lucide-react\";\n\ninterface VideoRecorderProps {\n  isRecording: boolean;\n  onRecordingComplete: (blob: Blob) => void;\n  recordedBlob?: Blob | null;\n  maxDuration?: number; // in seconds\n}\n\nexport default function VideoRecorder({ \n  isRecording, \n  onRecordingComplete, \n  recordedBlob,\n  maxDuration = 30 \n}: VideoRecorderProps) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [hasCamera, setHasCamera] = useState(false);\n  const [cameraError, setCameraError] = useState<string | null>(null);\n\n  // Initialize camera\n  useEffect(() => {\n    const initCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            width: { ideal: 1280 },\n            height: { ideal: 720 },\n            frameRate: { ideal: 30 }\n          },\n          audio: true\n        });\n        \n        streamRef.current = stream;\n        \n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n        \n        setHasCamera(true);\n        setCameraError(null);\n      } catch (error) {\n        console.error(\"Camera access error:\", error);\n        setCameraError(\"Camera access denied. Please allow camera permissions and reload the page.\");\n        setHasCamera(false);\n      }\n    };\n\n    initCamera();\n\n    return () => {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Handle recording timer\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    \n    if (isRecording) {\n      setRecordingTime(0);\n      interval = setInterval(() => {\n        setRecordingTime(prev => {\n          const newTime = prev + 1;\n          if (newTime >= maxDuration) {\n            stopRecording();\n          }\n          return newTime;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isRecording, maxDuration]);\n\n  // Start recording when isRecording becomes true\n  useEffect(() => {\n    if (isRecording && streamRef.current && !mediaRecorderRef.current) {\n      startRecording();\n    } else if (!isRecording && mediaRecorderRef.current) {\n      stopRecording();\n    }\n  }, [isRecording]);\n\n  const startRecording = () => {\n    if (!streamRef.current) return;\n\n    try {\n      const mediaRecorder = new MediaRecorder(streamRef.current, {\n        mimeType: 'video/webm'\n      });\n      \n      const chunks: Blob[] = [];\n      \n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunks, { type: 'video/webm' });\n        onRecordingComplete(blob);\n        mediaRecorderRef.current = null;\n      };\n\n      mediaRecorder.start();\n      mediaRecorderRef.current = mediaRecorder;\n    } catch (error) {\n      console.error(\"Recording start error:\", error);\n      setCameraError(\"Failed to start recording. Please try again.\");\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (cameraError) {\n    return (\n      <div className=\"aspect-video bg-muted rounded-lg flex items-center justify-center\">\n        <div className=\"text-center p-6\">\n          <div className=\"text-6xl mb-4\">📹</div>\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\">Camera Access Required</h3>\n          <p className=\"text-sm text-muted-foreground mb-4\">{cameraError}</p>\n          <Button \n            onClick={() => window.location.reload()}\n            variant=\"outline\"\n            data-testid=\"button-reload-camera\"\n          >\n            <RotateCcw className=\"w-4 h-4 mr-2\" />\n            Retry Camera Access\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!hasCamera) {\n    return (\n      <div className=\"aspect-video bg-muted rounded-lg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"spinner mb-4\"></div>\n          <p className=\"text-muted-foreground\">Initializing camera...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative aspect-video bg-muted rounded-lg overflow-hidden\">\n      {/* Video Element */}\n      <video\n        ref={videoRef}\n        autoPlay\n        muted\n        playsInline\n        className={`w-full h-full object-cover ${recordedBlob ? 'hidden' : ''}`}\n      />\n\n      {/* Recorded Video Playback */}\n      {recordedBlob && (\n        <video\n          src={URL.createObjectURL(recordedBlob)}\n          controls\n          className=\"w-full h-full object-cover\"\n          data-testid=\"recorded-video\"\n        />\n      )}\n\n      {/* Recording Timer */}\n      {isRecording && (\n        <div className=\"absolute top-4 left-4 bg-destructive/90 text-destructive-foreground px-3 py-1 rounded-full text-sm font-medium\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-2 h-2 bg-destructive-foreground rounded-full animate-pulse\"></div>\n            {formatTime(recordingTime)} / {formatTime(maxDuration)}\n          </div>\n        </div>\n      )}\n\n      {/* Recording Guide Overlay */}\n      {!isRecording && !recordedBlob && (\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className=\"recording-overlay\"></div>\n          <div className=\"skeleton-overlay\"></div>\n          <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-primary/90 text-primary-foreground px-4 py-2 rounded-lg text-sm font-medium\">\n            Position yourself within the guide\n          </div>\n        </div>\n      )}\n\n      {/* Recording Progress Bar */}\n      {isRecording && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-muted\">\n          <div \n            className=\"h-full bg-destructive transition-all duration-1000\"\n            style={{ width: `${(recordingTime / maxDuration) * 100}%` }}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6563},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/assessment.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport MotionCard from \"@/components/ui/motion-card\";\nimport GlowingButton from \"@/components/ui/glowing-button\";\nimport TestSelection from \"@/components/test-selection\";\nimport { \n  ArrowLeft,\n  Clock,\n  Users,\n  Trophy,\n  Play,\n  Info,\n  CheckCircle,\n  AlertCircle\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function Assessment() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [selectedTest, setSelectedTest] = useState<any>(null);\n  const [showInstructions, setShowInstructions] = useState(false);\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Get athlete profile\n  const { data: athlete } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  // Get test types\n  const { data: testTypes, isLoading: testTypesLoading } = useQuery({\n    queryKey: [\"/api/test-types\"],\n    retry: false,\n  });\n\n  // Create assessment mutation\n  const createAssessmentMutation = useMutation({\n    mutationFn: async (testTypeId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/assessments\", {\n        testTypeId,\n        status: \"pending\"\n      });\n      return response.json();\n    },\n    onSuccess: (assessment) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/athletes\"] });\n      window.location.href = `/assessment/${assessment.id}/record`;\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create assessment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"spinner mb-4\"></div>\n          <h2 className=\"text-xl font-heading font-bold text-primary\">KALA KAUSHAL</h2>\n          <p className=\"text-muted-foreground\">Loading assessment...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!athlete?.athlete) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-6 text-center\">\n            <AlertCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n            <h2 className=\"text-xl font-heading font-bold text-foreground mb-2\">\n              Profile Required\n            </h2>\n            <p className=\"text-muted-foreground mb-4\">\n              You need to create an athlete profile before taking assessments.\n            </p>\n            <Link href=\"/\">\n              <Button>Create Profile</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleTestSelect = (test: any) => {\n    setSelectedTest(test);\n    setShowInstructions(true);\n  };\n\n  const handleStartAssessment = () => {\n    if (selectedTest) {\n      createAssessmentMutation.mutate(selectedTest.id);\n    }\n  };\n\n  if (showInstructions && selectedTest) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border p-4 md:p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => setShowInstructions(false)}\n              className=\"mb-4 text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-back-to-selection\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Test Selection\n            </Button>\n            \n            <div className=\"flex items-center gap-4\">\n              <div className=\"p-3 bg-primary/20 rounded-lg\">\n                <Play className=\"w-8 h-8 text-primary\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl md:text-3xl font-heading font-bold text-foreground\">\n                  {selectedTest.name}\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  {selectedTest.category} • {selectedTest.estimatedDuration} minutes\n                </p>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Instructions */}\n        <main className=\"max-w-4xl mx-auto p-4 md:p-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Instructions Content */}\n            <div className=\"lg:col-span-2\">\n              <MotionCard delay={0.1}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-lg font-heading font-bold\">\n                    <Info className=\"w-5 h-5 mr-2 text-primary\" />\n                    Test Instructions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"p-4 bg-muted/50 rounded-lg\">\n                    <h3 className=\"font-semibold text-foreground mb-2\">Description</h3>\n                    <p className=\"text-muted-foreground\">\n                      {selectedTest.description || \"This test measures your athletic performance using advanced AI analysis.\"}\n                    </p>\n                  </div>\n\n                  {selectedTest.instructions && (\n                    <div className=\"p-4 bg-primary/10 border border-primary/30 rounded-lg\">\n                      <h3 className=\"font-semibold text-foreground mb-2\">How to Perform</h3>\n                      <p className=\"text-foreground\">\n                        {selectedTest.instructions}\n                      </p>\n                    </div>\n                  )}\n\n                  {selectedTest.equipmentRequired?.length > 0 && (\n                    <div className=\"p-4 bg-secondary/10 border border-secondary/30 rounded-lg\">\n                      <h3 className=\"font-semibold text-foreground mb-2\">Equipment Required</h3>\n                      <ul className=\"list-disc list-inside space-y-1\">\n                        {selectedTest.equipmentRequired.map((equipment: string, index: number) => (\n                          <li key={index} className=\"text-foreground\">{equipment}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  <div className=\"p-4 bg-accent/10 border border-accent/30 rounded-lg\">\n                    <h3 className=\"font-semibold text-foreground mb-2\">Important Tips</h3>\n                    <ul className=\"list-disc list-inside space-y-1 text-foreground\">\n                      <li>Ensure good lighting and clear camera view</li>\n                      <li>Position your phone at the recommended distance</li>\n                      <li>Wear appropriate athletic clothing</li>\n                      <li>Warm up properly before starting</li>\n                      <li>Follow the on-screen guidance during recording</li>\n                    </ul>\n                  </div>\n                </CardContent>\n              </MotionCard>\n            </div>\n\n            {/* Test Details Sidebar */}\n            <div className=\"space-y-6\">\n              <MotionCard delay={0.2}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-heading font-bold\">Test Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Clock className=\"w-5 h-5 text-primary\" />\n                    <div>\n                      <div className=\"text-sm text-muted-foreground\">Duration</div>\n                      <div className=\"font-medium text-foreground\">\n                        ~{selectedTest.estimatedDuration} minutes\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <Trophy className=\"w-5 h-5 text-secondary\" />\n                    <div>\n                      <div className=\"text-sm text-muted-foreground\">Category</div>\n                      <div className=\"font-medium text-foreground\">\n                        {selectedTest.category}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <Users className=\"w-5 h-5 text-accent\" />\n                    <div>\n                      <div className=\"text-sm text-muted-foreground\">Difficulty</div>\n                      <Badge \n                        variant=\"outline\"\n                        className={\n                          selectedTest.difficultyLevel === 'beginner' ? 'border-accent text-accent' :\n                          selectedTest.difficultyLevel === 'intermediate' ? 'border-secondary text-secondary' :\n                          'border-destructive text-destructive'\n                        }\n                      >\n                        {selectedTest.difficultyLevel}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </MotionCard>\n\n              <MotionCard delay={0.3}>\n                <CardContent className=\"p-6\">\n                  <div className=\"text-center mb-4\">\n                    <CheckCircle className=\"w-12 h-12 text-accent mx-auto mb-2\" />\n                    <h3 className=\"font-heading font-bold text-foreground\">Ready to Start?</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Make sure you've read all instructions carefully\n                    </p>\n                  </div>\n                  \n                  <GlowingButton\n                    onClick={handleStartAssessment}\n                    disabled={createAssessmentMutation.isPending}\n                    className=\"w-full\"\n                    data-testid=\"button-start-assessment\"\n                  >\n                    {createAssessmentMutation.isPending ? (\n                      <div className=\"flex items-center\">\n                        <div className=\"spinner mr-2\"></div>\n                        Creating Assessment...\n                      </div>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        Start Assessment\n                      </>\n                    )}\n                  </GlowingButton>\n                </CardContent>\n              </MotionCard>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4 md:p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Link href=\"/\">\n            <Button \n              variant=\"ghost\" \n              className=\"mb-4 text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-back-dashboard\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n          \n          <div className=\"text-center\">\n            <h1 className=\"text-3xl md:text-4xl font-heading font-bold text-primary mb-2\">\n              Choose Your Assessment\n            </h1>\n            <p className=\"text-muted-foreground text-lg\">\n              Select a test to measure your athletic performance with AI analysis\n            </p>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto p-4 md:p-6\">\n        {/* Welcome Message */}\n        <MotionCard delay={0.1} className=\"mb-8\">\n          <CardContent className=\"p-6 text-center\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n            >\n              <div className=\"text-6xl mb-4\">🏃‍♂️</div>\n              <h2 className=\"text-2xl font-heading font-bold text-foreground mb-2\">\n                Ready to showcase your talent?\n              </h2>\n              <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n                Our AI-powered assessments analyze your performance in real-time, \n                providing detailed insights and connecting you with scouts and opportunities.\n              </p>\n            </motion.div>\n          </CardContent>\n        </MotionCard>\n\n        {/* Test Selection */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-heading font-bold text-foreground mb-6 text-center\">\n            Available Assessments\n          </h2>\n          \n          {testTypesLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-12 bg-muted rounded mb-4\"></div>\n                    <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-4\"></div>\n                    <div className=\"h-10 bg-muted rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <TestSelection \n              testTypes={testTypes || []} \n              onTestSelect={handleTestSelect}\n              showStartButton={false}\n            />\n          )}\n        </div>\n\n        {/* Additional Info */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <MotionCard delay={0.4}>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Trophy className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"font-heading font-bold text-foreground mb-2\">AI Analysis</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Advanced computer vision analyzes your technique and performance metrics\n              </p>\n            </CardContent>\n          </MotionCard>\n\n          <MotionCard delay={0.5}>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-secondary/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-6 h-6 text-secondary\" />\n              </div>\n              <h3 className=\"font-heading font-bold text-foreground mb-2\">Scout Visibility</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Outstanding performances get noticed by verified sports scouts\n              </p>\n            </CardContent>\n          </MotionCard>\n\n          <MotionCard delay={0.6}>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-accent/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <CheckCircle className=\"w-6 h-6 text-accent\" />\n              </div>\n              <h3 className=\"font-heading font-bold text-foreground mb-2\">Instant Results</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Get detailed performance insights and improvement recommendations\n              </p>\n            </CardContent>\n          </MotionCard>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":16540},"client/src/pages/athlete-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport MotionCard from \"@/components/ui/motion-card\";\nimport ProgressRing from \"@/components/ui/progress-ring\";\nimport GlowingButton from \"@/components/ui/glowing-button\";\nimport TestSelection from \"@/components/test-selection\";\nimport { \n  Trophy, \n  Video, \n  Target, \n  TrendingUp, \n  Medal, \n  Play,\n  Star,\n  Users,\n  Calendar,\n  Award\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface AthleteProfile {\n  id: string;\n  age?: number;\n  height?: string;\n  weight?: string;\n  location?: string;\n  primarySport?: string;\n  overallRating?: string;\n  isVerified: boolean;\n}\n\nexport default function AthleteDashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [showOnboarding, setShowOnboarding] = useState(false);\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\", \n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Get athlete profile\n  const { data: athlete, isLoading: athleteLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  // Get test types\n  const { data: testTypes, isLoading: testTypesLoading } = useQuery({\n    queryKey: [\"/api/test-types\"],\n    retry: false,\n  });\n\n  // Get recent assessments\n  const { data: assessments, isLoading: assessmentsLoading } = useQuery({\n    queryKey: [\"/api/athletes\", athlete?.athlete?.id, \"assessments\"],\n    enabled: !!athlete?.athlete?.id,\n    retry: false,\n  });\n\n  // Get achievements\n  const { data: achievements } = useQuery({\n    queryKey: [\"/api/athletes\", athlete?.athlete?.id, \"achievements\"],\n    enabled: !!athlete?.athlete?.id,\n    retry: false,\n  });\n\n  // Create athlete profile mutation\n  const createProfileMutation = useMutation({\n    mutationFn: async (profileData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/athletes\", profileData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setShowOnboarding(false);\n      toast({\n        title: \"Profile Created!\",\n        description: \"Your athlete profile has been created successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (athlete && !athlete.athlete && !createProfileMutation.isPending) {\n      setShowOnboarding(true);\n    }\n  }, [athlete, createProfileMutation.isPending]);\n\n  if (isLoading || athleteLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <motion.div \n          className=\"text-center\"\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.5 }}\n        >\n          <div className=\"spinner mb-4 loading-pulse\"></div>\n          <motion.h2 \n            className=\"text-xl font-heading font-bold text-primary breathe\"\n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.2, duration: 0.5 }}\n          >\n            KALA KAUSHAL\n          </motion.h2>\n          <motion.p \n            className=\"text-muted-foreground\"\n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.4, duration: 0.5 }}\n          >\n            Loading your dashboard...\n          </motion.p>\n        </motion.div>\n      </div>\n    );\n  }\n\n  if (showOnboarding) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <MotionCard \n          variant=\"gradient\" \n          className=\"w-full max-w-2xl\"\n          initial={{ opacity: 0, scale: 0.8, y: 50 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          transition={{ duration: 0.8, type: \"spring\", stiffness: 80 }}\n        >\n          <CardHeader className=\"text-center\">\n            <motion.div\n              initial={{ opacity: 0, y: -30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n            >\n              <CardTitle className=\"text-3xl font-heading font-bold text-primary mb-2 text-reveal\">\n                Welcome to KALA KAUSHAL!\n              </CardTitle>\n            </motion.div>\n            <motion.p \n              className=\"text-muted-foreground\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.5, duration: 0.6 }}\n            >\n              Let's create your athlete profile to get started\n            </motion.p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {/* Profile creation form would go here */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Age\n                  </label>\n                  <input\n                    type=\"number\"\n                    className=\"w-full bg-input border border-border rounded-lg px-4 py-3 text-foreground\"\n                    placeholder=\"Enter your age\"\n                    data-testid=\"input-age\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Primary Sport\n                  </label>\n                  <select \n                    className=\"w-full bg-input border border-border rounded-lg px-4 py-3 text-foreground\"\n                    data-testid=\"select-sport\"\n                  >\n                    <option value=\"\">Select Sport</option>\n                    <option value=\"cricket\">Cricket</option>\n                    <option value=\"football\">Football</option>\n                    <option value=\"athletics\">Athletics</option>\n                    <option value=\"basketball\">Basketball</option>\n                  </select>\n                </div>\n              </div>\n              \n              <GlowingButton\n                onClick={() => {\n                  const profileData = {\n                    age: 20,\n                    primarySport: \"cricket\",\n                    location: \"Mumbai\",\n                    height: \"175\",\n                    weight: \"70\"\n                  };\n                  createProfileMutation.mutate(profileData);\n                }}\n                disabled={createProfileMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-create-profile\"\n              >\n                {createProfileMutation.isPending ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"spinner mr-2\"></div>\n                    Creating Profile...\n                  </div>\n                ) : (\n                  \"Create My Profile\"\n                )}\n              </GlowingButton>\n            </div>\n          </CardContent>\n        </MotionCard>\n      </div>\n    );\n  }\n\n  const athleteProfile = athlete?.athlete as AthleteProfile;\n  const recentAssessments = assessments?.slice(0, 3) || [];\n  const completedTests = assessments?.filter((a: any) => a.status === 'completed').length || 0;\n  const overallRating = parseFloat(athleteProfile?.overallRating || \"0\");\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile Navigation */}\n      <MobileNav userRole=\"athlete\" />\n\n      {/* Main Content */}\n      <div className=\"pb-20 md:pb-6\">\n        {/* Header */}\n        <motion.header \n          className=\"glass-morphism border-b border-border p-4 md:p-6\"\n          initial={{ opacity: 0, y: -30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <div className=\"flex items-center justify-between\">\n            <motion.div\n              initial={{ opacity: 0, x: -30 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2, duration: 0.6 }}\n            >\n              <h1 className=\"text-2xl md:text-3xl font-heading font-bold breathe\">\n                KALA KAUSHAL\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Welcome back, {user?.firstName || \"Athlete\"}! \n                {athleteProfile?.isVerified && (\n                  <motion.div\n                    className=\"inline-block\"\n                    initial={{ scale: 0, rotate: -180 }}\n                    animate={{ scale: 1, rotate: 0 }}\n                    transition={{ delay: 0.8, type: \"spring\", stiffness: 200 }}\n                  >\n                    <Badge className=\"ml-2 bg-accent text-accent-foreground success-bounce\">\n                      <Medal className=\"w-3 h-3 mr-1 animate-pulse\" />\n                      Verified\n                    </Badge>\n                  </motion.div>\n                )}\n              </p>\n            </motion.div>\n            <motion.div \n              className=\"text-right\"\n              initial={{ opacity: 0, x: 30 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n            >\n              <motion.div \n                className=\"text-2xl font-bold text-primary counter interactive-glow\"\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ delay: 0.6, type: \"spring\", stiffness: 150 }}\n              >\n                {overallRating.toFixed(1)}\n              </motion.div>\n              <div className=\"text-sm text-muted-foreground\">Overall Rating</div>\n            </motion.div>\n          </div>\n        </motion.header>\n\n        {/* Dashboard Content */}\n        <main className=\"p-4 md:p-6\">\n          \n          {/* Quick Stats */}\n          <motion.div \n            className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\"\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            <MotionCard variant=\"enhanced\" delay={0} className=\"card-enhanced\">\n              <CardContent className=\"p-4 text-center\">\n                <motion.div \n                  className=\"text-2xl font-bold text-primary counter\"\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ delay: 0.3, type: \"spring\", stiffness: 200 }}\n                >\n                  {completedTests}\n                </motion.div>\n                <div className=\"text-sm text-muted-foreground\">Tests Done</div>\n                <Trophy className=\"w-4 h-4 mx-auto mt-2 text-primary animate-float\" />\n              </CardContent>\n            </MotionCard>\n            \n            <MotionCard variant=\"enhanced\" delay={0.1} className=\"card-enhanced\">\n              <CardContent className=\"p-4 text-center\">\n                <motion.div \n                  className=\"text-2xl font-bold text-secondary counter\"\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ delay: 0.4, type: \"spring\", stiffness: 200 }}\n                >\n                  {overallRating.toFixed(1)}\n                </motion.div>\n                <div className=\"text-sm text-muted-foreground\">Avg Score</div>\n                <Star className=\"w-4 h-4 mx-auto mt-2 text-secondary animate-pulse-slow\" />\n              </CardContent>\n            </MotionCard>\n            \n            <MotionCard variant=\"enhanced\" delay={0.2} className=\"card-enhanced\">\n              <CardContent className=\"p-4 text-center\">\n                <motion.div \n                  className=\"text-2xl font-bold text-accent counter\"\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ delay: 0.5, type: \"spring\", stiffness: 200 }}\n                >\n                  {achievements?.length || 0}\n                </motion.div>\n                <div className=\"text-sm text-muted-foreground\">Badges</div>\n                <Award className=\"w-4 h-4 mx-auto mt-2 text-accent animate-glow\" />\n              </CardContent>\n            </MotionCard>\n            \n            <MotionCard delay={0.3}>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-primary\">\n                  #{Math.floor(Math.random() * 500) + 1}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Rank</div>\n              </CardContent>\n            </MotionCard>\n          </motion.div>\n\n          {/* Test Selection */}\n          <div className=\"mb-6\">\n            <h2 className=\"text-xl font-heading font-bold text-foreground mb-4\">\n              Available Tests\n            </h2>\n            {testTypesLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {[...Array(4)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"h-12 bg-muted rounded mb-4\"></div>\n                      <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                      <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <TestSelection testTypes={testTypes || []} />\n            )}\n          </div>\n\n          {/* Recent Activity & Progress */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n            {/* Recent Assessments */}\n            <MotionCard delay={0.2}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-lg font-heading font-bold\">\n                  <Calendar className=\"mr-2 h-5 w-5 text-primary\" />\n                  Recent Activity\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {assessmentsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                        <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : recentAssessments.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {recentAssessments.map((assessment: any, index: number) => (\n                      <motion.div\n                        key={assessment.id}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ duration: 0.5, delay: index * 0.1 }}\n                        className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\"\n                      >\n                        <div>\n                          <p className=\"text-sm font-medium text-foreground\">\n                            {assessment.testType?.name || \"Assessment\"}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(assessment.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <Badge \n                          variant={assessment.status === 'completed' ? 'default' : 'secondary'}\n                          className={assessment.status === 'completed' ? 'bg-accent' : ''}\n                        >\n                          {assessment.status}\n                        </Badge>\n                      </motion.div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Video className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No assessments yet</p>\n                    <p className=\"text-sm text-muted-foreground\">Take your first test to get started!</p>\n                  </div>\n                )}\n              </CardContent>\n            </MotionCard>\n\n            {/* Progress Chart */}\n            <MotionCard delay={0.3}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-lg font-heading font-bold\">\n                  <TrendingUp className=\"mr-2 h-5 w-5 text-secondary\" />\n                  Performance Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center mb-6\">\n                  <ProgressRing value={overallRating} size={120} strokeWidth={8} />\n                  <div className=\"mt-4\">\n                    <div className=\"text-xl font-bold text-primary\">{overallRating.toFixed(1)}/10</div>\n                    <div className=\"text-sm text-muted-foreground\">Overall Score</div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  {[\n                    { name: \"Speed\", value: 85, color: \"bg-primary\" },\n                    { name: \"Agility\", value: 78, color: \"bg-secondary\" },\n                    { name: \"Endurance\", value: 92, color: \"bg-accent\" },\n                    { name: \"Strength\", value: 74, color: \"bg-primary\" }\n                  ].map((metric, index) => (\n                    <div key={metric.name}>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-foreground\">{metric.name}</span>\n                        <span className=\"text-muted-foreground\">{metric.value}%</span>\n                      </div>\n                      <Progress value={metric.value} className=\"h-2\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </MotionCard>\n          </div>\n\n          {/* Achievements */}\n          <MotionCard delay={0.4}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg font-heading font-bold\">\n                <Award className=\"mr-2 h-5 w-5 text-accent\" />\n                Recent Achievements\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {achievements?.length > 0 ? (\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  {achievements.slice(0, 4).map((achievement: any, index: number) => (\n                    <motion.div\n                      key={achievement.id}\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      transition={{ duration: 0.5, delay: index * 0.1 }}\n                      className=\"text-center p-4 bg-muted/50 rounded-lg hover-glow\"\n                    >\n                      <div className=\"w-12 h-12 bg-accent rounded-full flex items-center justify-center mx-auto mb-2 animate-float\">\n                        <Trophy className=\"h-6 w-6 text-accent-foreground\" />\n                      </div>\n                      <h4 className=\"text-sm font-bold text-foreground mb-1\">\n                        {achievement.achievement?.name || \"Achievement\"}\n                      </h4>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {new Date(achievement.unlockedAt).toLocaleDateString()}\n                      </p>\n                    </motion.div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Trophy className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No achievements yet</p>\n                  <p className=\"text-sm text-muted-foreground\">Complete tests to earn your first badge!</p>\n                </div>\n              )}\n            </CardContent>\n          </MotionCard>\n\n          {/* Quick Actions */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n            <Link href=\"/assessment\">\n              <GlowingButton className=\"w-full h-20\" data-testid=\"button-start-test\">\n                <div className=\"text-center\">\n                  <Play className=\"h-6 w-6 mx-auto mb-1\" />\n                  <div className=\"text-sm font-medium\">Start New Test</div>\n                </div>\n              </GlowingButton>\n            </Link>\n            \n            <Link href=\"/leaderboard\">\n              <Button \n                variant=\"outline\" \n                className=\"w-full h-20 border-secondary text-secondary hover:bg-secondary/10\"\n                data-testid=\"button-view-leaderboard\"\n              >\n                <div className=\"text-center\">\n                  <Users className=\"h-6 w-6 mx-auto mb-1\" />\n                  <div className=\"text-sm font-medium\">View Leaderboard</div>\n                </div>\n              </Button>\n            </Link>\n            \n            {athlete?.athlete?.id ? (\n              <Link href={`/athlete/${athlete.athlete.id}`}>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full h-20 border-accent text-accent hover:bg-accent/10\"\n                  data-testid=\"button-view-profile\"\n                >\n                  <div className=\"text-center\">\n                    <Star className=\"h-6 w-6 mx-auto mb-1\" />\n                    <div className=\"text-sm font-medium\">My Profile</div>\n                  </div>\n                </Button>\n              </Link>\n            ) : (\n              <Button \n                variant=\"outline\" \n                className=\"w-full h-20 border-accent text-accent opacity-50 cursor-not-allowed\"\n                disabled\n                data-testid=\"button-view-profile\"\n              >\n                <div className=\"text-center\">\n                  <Star className=\"h-6 w-6 mx-auto mb-1\" />\n                  <div className=\"text-sm font-medium\">My Profile</div>\n                </div>\n              </Button>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23500},"client/src/pages/athlete-profile.tsx":{"content":"import { useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport ProgressRing from \"@/components/ui/progress-ring\";\nimport PerformanceChart from \"@/components/performance-chart\";\nimport AIInsightsPanel from \"@/components/ai-insights-panel\";\nimport VideoGallery from \"@/components/video-gallery\";\nimport { \n  MapPin, \n  Calendar, \n  Ruler, \n  Weight, \n  Trophy, \n  Video, \n  TrendingUp, \n  Medal,\n  Star,\n  Eye,\n  Share,\n  Download\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function AthleteProfile() {\n  const { id } = useParams();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Get athlete data\n  const { data: athlete, isLoading: athleteLoading, error } = useQuery({\n    queryKey: [\"/api/athletes\", id],\n    enabled: !!id && isAuthenticated,\n    retry: false,\n  });\n\n  // Get athlete assessments\n  const { data: assessments, isLoading: assessmentsLoading } = useQuery({\n    queryKey: [\"/api/athletes\", id, \"assessments\"],\n    enabled: !!id && !!athlete,\n    retry: false,\n  });\n\n  // Get athlete achievements\n  const { data: achievements } = useQuery({\n    queryKey: [\"/api/athletes\", id, \"achievements\"],\n    enabled: !!id && !!athlete,\n    retry: false,\n  });\n\n  // Handle errors\n  useEffect(() => {\n    if (error && isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  if (isLoading || athleteLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"spinner mb-4\"></div>\n          <h2 className=\"text-xl font-heading font-bold text-primary\">KALA KAUSHAL</h2>\n          <p className=\"text-muted-foreground\">Loading athlete profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!athlete) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-6xl mb-4\">🏃‍♂️</div>\n            <h2 className=\"text-xl font-heading font-bold text-foreground mb-2\">\n              Athlete Not Found\n            </h2>\n            <p className=\"text-muted-foreground mb-4\">\n              The athlete profile you're looking for doesn't exist or has been removed.\n            </p>\n            <Button onClick={() => window.history.back()}>\n              Go Back\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const overallRating = parseFloat((athlete as any)?.overallRating || \"0\");\n  const completedAssessments = (assessments as any)?.filter((a: any) => a.status === 'completed') || [];\n  const totalAssessments = (assessments as any)?.length || 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4 md:p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => window.history.back()}\n            className=\"mb-4 text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-back\"\n          >\n            ← Back\n          </Button>\n          \n          <div className=\"flex flex-col md:flex-row items-start md:items-center gap-6\">\n            {/* Profile Image */}\n            <Avatar className=\"w-24 h-24 border-4 border-primary\">\n              <AvatarImage src=\"/default-avatar.png\" alt=\"Athlete\" />\n              <AvatarFallback className=\"bg-primary text-primary-foreground text-2xl\">\n                {(athlete as any)?.userId?.charAt(0)?.toUpperCase() || \"A\"}\n              </AvatarFallback>\n            </Avatar>\n\n            {/* Profile Info */}\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-4 mb-2\">\n                <h1 className=\"text-3xl font-heading font-bold text-foreground\">\n                  Athlete Profile\n                </h1>\n                {(athlete as any)?.isVerified && (\n                  <Badge className=\"bg-accent text-accent-foreground\">\n                    <Medal className=\"w-3 h-3 mr-1\" />\n                    Verified\n                  </Badge>\n                )}\n              </div>\n              \n              <div className=\"flex flex-wrap gap-4 text-sm text-muted-foreground mb-4\">\n                {(athlete as any)?.location && (\n                  <div className=\"flex items-center\">\n                    <MapPin className=\"w-4 h-4 mr-1\" />\n                    {(athlete as any)?.location}\n                  </div>\n                )}\n                {(athlete as any)?.primarySport && (\n                  <div className=\"flex items-center\">\n                    <Trophy className=\"w-4 h-4 mr-1\" />\n                    {(athlete as any)?.primarySport}\n                  </div>\n                )}\n                {(athlete as any)?.age && (\n                  <div className=\"flex items-center\">\n                    <Calendar className=\"w-4 h-4 mr-1\" />\n                    {(athlete as any)?.age} years old\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <div className=\"text-3xl font-bold text-primary\">\n                  {overallRating.toFixed(1)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">/ 10.0</div>\n                <div className=\"flex ml-2\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star\n                      key={i}\n                      className={`w-4 h-4 ${\n                        i < Math.floor(overallRating / 2) \n                          ? \"text-secondary fill-current\" \n                          : \"text-muted-foreground\"\n                      }`}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-share\">\n                <Share className=\"w-4 h-4 mr-2\" />\n                Share\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-download\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto p-4 md:p-6\">\n        \n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n          <Card className=\"glow-border hover-glow animate-slide-up\">\n            <CardContent className=\"p-4 text-center\">\n              <Video className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-foreground\">{totalAssessments}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Tests</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"glow-border hover-glow animate-slide-up\">\n            <CardContent className=\"p-4 text-center\">\n              <TrendingUp className=\"w-8 h-8 text-secondary mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-foreground\">{completedAssessments.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Completed</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"glow-border hover-glow animate-slide-up\">\n            <CardContent className=\"p-4 text-center\">\n              <Trophy className=\"w-8 h-8 text-accent mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-foreground\">{(achievements as any)?.length || 0}</div>\n              <div className=\"text-sm text-muted-foreground\">Achievements</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"glow-border hover-glow animate-slide-up\">\n            <CardContent className=\"p-4 text-center\">\n              <Eye className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-foreground\">\n                {Math.floor(Math.random() * 100) + 50}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Profile Views</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Profile Tabs */}\n        <Tabs defaultValue=\"overview\" className=\"mb-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"assessments\" data-testid=\"tab-assessments\">Assessments</TabsTrigger>\n            <TabsTrigger value=\"achievements\" data-testid=\"tab-achievements\">Achievements</TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"mt-6\">\n            <div className=\"space-y-6\">\n              {/* AI Insights Panel */}\n              {id && <AIInsightsPanel athleteId={id} />}\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Physical Stats */}\n                <Card className=\"glow-border hover-glow\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg font-heading font-bold\">Physical Attributes</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      {(athlete as any)?.height && (\n                        <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                          <Ruler className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n                          <div className=\"text-xl font-bold text-foreground\">{(athlete as any)?.height} cm</div>\n                          <div className=\"text-sm text-muted-foreground\">Height</div>\n                        </div>\n                      )}\n                      {(athlete as any)?.weight && (\n                        <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                          <Weight className=\"w-6 h-6 text-secondary mx-auto mb-2\" />\n                          <div className=\"text-xl font-bold text-foreground\">{(athlete as any)?.weight} kg</div>\n                          <div className=\"text-sm text-muted-foreground\">Weight</div>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Performance Overview */}\n                <Card className=\"glow-border hover-glow\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg font-heading font-bold\">Performance Overview</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center mb-6\">\n                      <ProgressRing value={overallRating * 10} size={120} strokeWidth={8} />\n                      <div className=\"mt-4\">\n                        <div className=\"text-2xl font-bold text-primary\">{overallRating.toFixed(1)}/10</div>\n                        <div className=\"text-sm text-muted-foreground\">Overall Rating</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"assessments\" className=\"mt-6\">\n            <div className=\"space-y-6\">\n              {/* Video Gallery */}\n              {id && <VideoGallery athleteId={id} />}\n              \n              {/* Assessment History */}\n              <Card className=\"glow-border hover-glow\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-heading font-bold\">Assessment History</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {assessmentsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"animate-pulse p-4 border border-border rounded-lg\">\n                          <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (assessments as any)?.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {(assessments as any).map((assessment: any, index: number) => (\n                        <motion.div\n                          key={assessment.id}\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ duration: 0.5, delay: index * 0.1 }}\n                          className=\"p-4 border border-border rounded-lg hover:bg-muted/20 transition-colors\"\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <h3 className=\"font-medium text-foreground\">\n                                {assessment.testType?.name || \"Assessment\"}\n                              </h3>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {new Date(assessment.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                            <div className=\"text-right\">\n                              <Badge \n                                variant={assessment.status === 'completed' ? 'default' : 'secondary'}\n                                className={assessment.status === 'completed' ? 'bg-accent' : ''}\n                              >\n                                {assessment.status}\n                              </Badge>\n                              {assessment.performanceScore && (\n                                <div className=\"text-sm font-medium text-primary mt-1\">\n                                  Score: {assessment.performanceScore}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </motion.div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Video className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">No assessments found</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"achievements\" className=\"mt-6\">\n            <Card className=\"glow-border hover-glow\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-heading font-bold\">Achievements & Badges</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {(achievements as any)?.length > 0 ? (\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                    {(achievements as any).map((achievement: any, index: number) => (\n                      <motion.div\n                        key={achievement.id}\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        transition={{ duration: 0.5, delay: index * 0.1 }}\n                        className=\"text-center p-4 bg-muted/50 rounded-lg hover-glow\"\n                      >\n                        <div className=\"w-16 h-16 bg-accent rounded-full flex items-center justify-center mx-auto mb-3 animate-float\">\n                          <Trophy className=\"h-8 w-8 text-accent-foreground\" />\n                        </div>\n                        <h4 className=\"text-sm font-bold text-foreground mb-1\">\n                          {achievement.achievement?.name || \"Achievement\"}\n                        </h4>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {new Date(achievement.unlockedAt).toLocaleDateString()}\n                        </p>\n                      </motion.div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Trophy className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No achievements yet</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"mt-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"glow-border hover-glow\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-heading font-bold\">Performance Trends</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <PerformanceChart assessments={assessments as any} />\n                </CardContent>\n              </Card>\n\n              <Card className=\"glow-border hover-glow\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-heading font-bold\">Detailed Metrics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {[\n                      { name: \"Speed\", value: 85, color: \"bg-primary\" },\n                      { name: \"Agility\", value: 78, color: \"bg-secondary\" },\n                      { name: \"Endurance\", value: 92, color: \"bg-accent\" },\n                      { name: \"Strength\", value: 74, color: \"bg-primary\" },\n                      { name: \"Coordination\", value: 88, color: \"bg-secondary\" }\n                    ].map((metric, index) => (\n                      <div key={metric.name}>\n                        <div className=\"flex justify-between text-sm mb-2\">\n                          <span className=\"text-foreground\">{metric.name}</span>\n                          <span className=\"text-muted-foreground\">{metric.value}%</span>\n                        </div>\n                        <div className=\"w-full bg-muted rounded-full h-2\">\n                          <motion.div\n                            initial={{ width: 0 }}\n                            animate={{ width: `${metric.value}%` }}\n                            transition={{ duration: 1, delay: index * 0.2 }}\n                            className={`h-2 rounded-full ${metric.color}`}\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n","size_bytes":20239},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { PlayCircle, Users, Trophy, Zap, Shield, Globe, Star } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function Landing() {\n  const features = [\n    {\n      icon: <Zap className=\"h-8 w-8 text-primary\" />,\n      title: \"AI-Powered Analysis\",\n      description: \"Advanced computer vision analyzes your athletic performance with precision\"\n    },\n    {\n      icon: <Users className=\"h-8 w-8 text-secondary\" />,\n      title: \"Scout Connections\",\n      description: \"Connect directly with verified sports scouts and talent recruiters\"\n    },\n    {\n      icon: <Trophy className=\"h-8 w-8 text-accent\" />,\n      title: \"Performance Tracking\",\n      description: \"Track your progress and compete on national leaderboards\"\n    },\n    {\n      icon: <Shield className=\"h-8 w-8 text-primary\" />,\n      title: \"Verified Results\",\n      description: \"AI ensures authentic assessments with tamper-proof analysis\"\n    },\n    {\n      icon: <Globe className=\"h-8 w-8 text-secondary\" />,\n      title: \"Multi-Language\",\n      description: \"Available in Hindi, Gujarati, English and more regional languages\"\n    },\n    {\n      icon: <Star className=\"h-8 w-8 text-accent\" />,\n      title: \"Achievements\",\n      description: \"Earn badges and unlock achievements as you improve your skills\"\n    }\n  ];\n\n  const stats = [\n    { value: \"12,847\", label: \"Registered Athletes\" },\n    { value: \"8,932\", label: \"Assessments Completed\" },\n    { value: \"1,203\", label: \"Talent Discovered\" },\n    { value: \"24,567\", label: \"Scout Views\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden py-20 px-4\">\n        {/* Animated background particles */}\n        <div className=\"absolute inset-0 overflow-hidden\">\n          {[...Array(20)].map((_, i) => (\n            <div\n              key={i}\n              className=\"particle animate-float\"\n              style={{\n                left: `${Math.random() * 100}%`,\n                top: `${Math.random() * 100}%`,\n                animationDelay: `${Math.random() * 3}s`,\n                animationDuration: `${Math.random() * 3 + 2}s`\n              }}\n            />\n          ))}\n        </div>\n\n        <div className=\"relative max-w-7xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n          >\n            <h1 className=\"text-6xl md:text-8xl font-heading font-bold mb-6 animate-glow\">\n              KALA KAUSHAL\n            </h1>\n            <div className=\"typewriter text-xl md:text-2xl text-muted-foreground mb-4 max-w-3xl mx-auto\">\n              AI-Powered Sports Talent Assessment Platform\n            </div>\n            <p className=\"text-lg md:text-xl text-foreground mb-8 max-w-3xl mx-auto\">\n              Democratizing athletic talent discovery across India with AI-powered video analysis, \n              connecting aspiring athletes with scouts and opportunities.\n            </p>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-12\"\n          >\n            <Button \n              size=\"lg\" \n              className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-4 text-lg ripple hover-glow\"\n              onClick={() => window.location.href = '/api/login'}\n              data-testid=\"button-login-primary\"\n            >\n              <PlayCircle className=\"mr-2 h-6 w-6\" />\n              Start Your Journey\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"border-secondary text-secondary hover:bg-secondary/10 px-8 py-4 text-lg hover-glow\"\n              onClick={() => window.location.href = '/api/login'}\n              data-testid=\"button-login-scout\"\n            >\n              <Users className=\"mr-2 h-6 w-6\" />\n              Scout Dashboard\n            </Button>\n          </motion.div>\n\n          {/* Language Support */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n            className=\"flex flex-wrap gap-2 justify-center\"\n          >\n            <Badge variant=\"secondary\" className=\"text-sm\">🇬🇧 English</Badge>\n            <Badge variant=\"secondary\" className=\"text-sm\">🇮🇳 हिंदी</Badge>\n            <Badge variant=\"secondary\" className=\"text-sm\">🇮🇳 ગુજરાતી</Badge>\n            <Badge variant=\"secondary\" className=\"text-sm\">+ More Languages</Badge>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 px-4 bg-card\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"grid grid-cols-2 md:grid-cols-4 gap-8\"\n          >\n            {stats.map((stat, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"text-3xl md:text-4xl font-heading font-bold text-primary mb-2\">\n                  {stat.value}\n                </div>\n                <div className=\"text-muted-foreground\">{stat.label}</div>\n              </div>\n            ))}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-16\"\n          >\n            <h2 className=\"text-4xl md:text-5xl font-heading font-bold text-foreground mb-6\">\n              Revolutionizing Sports Talent Discovery\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Our cutting-edge AI technology and comprehensive platform provide everything \n              needed to identify, nurture, and showcase athletic talent.\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.1 }}\n                viewport={{ once: true }}\n              >\n                <Card className=\"glow-border hover-glow h-full\">\n                  <CardHeader>\n                    <div className=\"mb-4 p-3 bg-muted rounded-lg w-fit\">\n                      {feature.icon}\n                    </div>\n                    <CardTitle className=\"text-xl font-heading font-bold\">\n                      {feature.title}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <CardDescription className=\"text-muted-foreground\">\n                      {feature.description}\n                    </CardDescription>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section className=\"py-20 px-4 bg-card\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-16\"\n          >\n            <h2 className=\"text-4xl md:text-5xl font-heading font-bold text-foreground mb-6\">\n              How It Works\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Get started in just three simple steps and begin your journey to athletic excellence.\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {[\n              {\n                step: \"01\",\n                title: \"Create Profile\",\n                description: \"Sign up and create your athlete profile with basic information and sports preferences.\",\n                color: \"text-primary\"\n              },\n              {\n                step: \"02\", \n                title: \"Record Tests\",\n                description: \"Use your smartphone to record standardized fitness tests with AI-guided instructions.\",\n                color: \"text-secondary\"\n              },\n              {\n                step: \"03\",\n                title: \"Get Discovered\",\n                description: \"Receive performance analysis, track progress, and get noticed by verified scouts.\",\n                color: \"text-accent\"\n              }\n            ].map((step, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: index * 0.2 }}\n                viewport={{ once: true }}\n                className=\"text-center\"\n              >\n                <div className={`text-6xl font-heading font-bold ${step.color} mb-4 animate-float`} \n                     style={{ animationDelay: `${index * 0.5}s` }}>\n                  {step.step}\n                </div>\n                <h3 className=\"text-2xl font-heading font-bold text-foreground mb-4\">\n                  {step.title}\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  {step.description}\n                </p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-4xl md:text-5xl font-heading font-bold text-foreground mb-6\">\n              Ready to Unlock Your Potential?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Join thousands of athletes already using Kala Kaushal to showcase their talent \n              and connect with opportunities across India.\n            </p>\n            <Button \n              size=\"lg\" \n              className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-12 py-6 text-xl ripple hover-glow animate-glow\"\n              onClick={() => window.location.href = '/api/login'}\n              data-testid=\"button-get-started\"\n            >\n              Get Started Free\n            </Button>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-12 px-4\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <h3 className=\"text-2xl font-heading font-bold text-primary mb-4\">KALA KAUSHAL</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Democratizing athletic talent discovery across India\n          </p>\n          <div className=\"flex justify-center space-x-6 text-sm text-muted-foreground\">\n            <a href=\"#\" className=\"hover:text-foreground transition-colors\">Privacy Policy</a>\n            <a href=\"#\" className=\"hover:text-foreground transition-colors\">Terms of Service</a>\n            <a href=\"#\" className=\"hover:text-foreground transition-colors\">Contact</a>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":12301},"client/src/pages/leaderboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport MotionCard from \"@/components/ui/motion-card\";\nimport { \n  ArrowLeft,\n  Trophy,\n  Medal,\n  Crown,\n  TrendingUp,\n  Users,\n  Filter,\n  MapPin,\n  Star\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function Leaderboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [selectedSport, setSelectedSport] = useState(\"\");\n  const [selectedMetric, setSelectedMetric] = useState(\"\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Get leaderboard data\n  const { data: leaderboard, isLoading: leaderboardLoading, error } = useQuery({\n    queryKey: [\"/api/leaderboard\", `sport=${selectedSport}&metric=${selectedMetric}&limit=50`],\n    retry: false,\n  });\n\n  // Get top athletes for highlights\n  const { data: topAthletes } = useQuery({\n    queryKey: [\"/api/athletes/top/3\"],\n    retry: false,\n  });\n\n  // Handle errors\n  useEffect(() => {\n    if (error && isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"spinner mb-4\"></div>\n          <h2 className=\"text-xl font-heading font-bold text-primary\">KALA KAUSHAL</h2>\n          <p className=\"text-muted-foreground\">Loading leaderboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Use comprehensive sports list from constants\n  const sports = [\n    \"Cricket\", \"Football (Soccer)\", \"Basketball\", \"Volleyball\", \"Tennis\", \"Badminton\",\n    \"Athletics (Track & Field)\", \"Swimming\", \"Hockey\", \"Boxing\", \"Wrestling\", \"Archery\",\n    \"Kabaddi\", \"Kho Kho\", \"Table Tennis\", \"Cycling\", \"Gymnastics\", \"Weightlifting\"\n  ];\n  const metrics = [\"Overall\", \"Speed\", \"Agility\", \"Endurance\", \"Strength\"];\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Crown className=\"w-6 h-6 text-yellow-500\" />;\n      case 2:\n        return <Medal className=\"w-6 h-6 text-gray-400\" />;\n      case 3:\n        return <Medal className=\"w-6 h-6 text-amber-600\" />;\n      default:\n        return <span className=\"text-lg font-bold text-muted-foreground\">#{rank}</span>;\n    }\n  };\n\n  const getRankColor = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return \"bg-gradient-to-r from-yellow-500/20 to-yellow-600/20 border-yellow-500/50\";\n      case 2:\n        return \"bg-gradient-to-r from-gray-400/20 to-gray-500/20 border-gray-400/50\";\n      case 3:\n        return \"bg-gradient-to-r from-amber-600/20 to-amber-700/20 border-amber-600/50\";\n      default:\n        return \"hover:bg-muted/50\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4 md:p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Link href=\"/\">\n            <Button \n              variant=\"ghost\" \n              className=\"mb-4 text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-back-dashboard\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n          \n          <div className=\"text-center\">\n            <h1 className=\"text-3xl md:text-4xl font-heading font-bold text-primary mb-2\">\n              🏆 Leaderboard\n            </h1>\n            <p className=\"text-muted-foreground text-lg\">\n              Top performing athletes across India\n            </p>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto p-4 md:p-6\">\n        \n        {/* Top 3 Podium */}\n        {topAthletes && topAthletes.length >= 3 && (\n          <MotionCard delay={0.1} className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-2xl font-heading font-bold text-center text-foreground mb-6\">\n                🥇 Top Performers\n              </h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {/* 2nd Place */}\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 0.2 }}\n                  className=\"order-2 md:order-1\"\n                >\n                  <div className=\"text-center\">\n                    <div className=\"relative\">\n                      <Avatar className=\"w-20 h-20 mx-auto mb-4 border-4 border-gray-400\">\n                        <AvatarImage src=\"/athlete-2.jpg\" alt=\"2nd Place\" />\n                        <AvatarFallback className=\"bg-gray-400 text-white text-xl\">2</AvatarFallback>\n                      </Avatar>\n                      <Medal className=\"w-8 h-8 text-gray-400 absolute -top-2 -right-2\" />\n                    </div>\n                    <h3 className=\"font-heading font-bold text-foreground mb-1\">\n                      Athlete #{topAthletes[1]?.id?.slice(-4)}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {topAthletes[1]?.primarySport} • {topAthletes[1]?.location}\n                    </p>\n                    <div className=\"text-2xl font-bold text-gray-400\">\n                      {parseFloat(topAthletes[1]?.overallRating || \"0\").toFixed(1)}\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* 1st Place */}\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 0.1 }}\n                  className=\"order-1 md:order-2\"\n                >\n                  <div className=\"text-center relative\">\n                    <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                      <Crown className=\"w-8 h-8 text-yellow-500 animate-float\" />\n                    </div>\n                    <div className=\"relative\">\n                      <Avatar className=\"w-24 h-24 mx-auto mb-4 border-4 border-yellow-500\">\n                        <AvatarImage src=\"/athlete-1.jpg\" alt=\"1st Place\" />\n                        <AvatarFallback className=\"bg-yellow-500 text-white text-xl\">1</AvatarFallback>\n                      </Avatar>\n                    </div>\n                    <h3 className=\"font-heading font-bold text-foreground mb-1 text-lg\">\n                      Athlete #{topAthletes[0]?.id?.slice(-4)}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {topAthletes[0]?.primarySport} • {topAthletes[0]?.location}\n                    </p>\n                    <div className=\"text-3xl font-bold text-yellow-500\">\n                      {parseFloat(topAthletes[0]?.overallRating || \"0\").toFixed(1)}\n                    </div>\n                    <Badge className=\"mt-2 bg-yellow-500 text-yellow-900\">\n                      Champion\n                    </Badge>\n                  </div>\n                </motion.div>\n\n                {/* 3rd Place */}\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 0.3 }}\n                  className=\"order-3\"\n                >\n                  <div className=\"text-center\">\n                    <div className=\"relative\">\n                      <Avatar className=\"w-20 h-20 mx-auto mb-4 border-4 border-amber-600\">\n                        <AvatarImage src=\"/athlete-3.jpg\" alt=\"3rd Place\" />\n                        <AvatarFallback className=\"bg-amber-600 text-white text-xl\">3</AvatarFallback>\n                      </Avatar>\n                      <Medal className=\"w-8 h-8 text-amber-600 absolute -top-2 -right-2\" />\n                    </div>\n                    <h3 className=\"font-heading font-bold text-foreground mb-1\">\n                      Athlete #{topAthletes[2]?.id?.slice(-4)}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {topAthletes[2]?.primarySport} • {topAthletes[2]?.location}\n                    </p>\n                    <div className=\"text-2xl font-bold text-amber-600\">\n                      {parseFloat(topAthletes[2]?.overallRating || \"0\").toFixed(1)}\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </CardContent>\n          </MotionCard>\n        )}\n\n        {/* Filters */}\n        <MotionCard delay={0.2} className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-lg font-heading font-bold\">\n              <Filter className=\"w-5 h-5 mr-2 text-primary\" />\n              Filter Rankings\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Sport Category\n                </label>\n                <select \n                  className=\"w-full bg-input border border-border rounded-lg px-4 py-3 text-foreground\"\n                  value={selectedSport}\n                  onChange={(e) => setSelectedSport(e.target.value)}\n                  data-testid=\"select-sport-filter\"\n                >\n                  <option value=\"\">All Sports</option>\n                  {sports.map((sport) => (\n                    <option key={sport} value={sport.toLowerCase()}>\n                      {sport}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Performance Metric\n                </label>\n                <select \n                  className=\"w-full bg-input border border-border rounded-lg px-4 py-3 text-foreground\"\n                  value={selectedMetric}\n                  onChange={(e) => setSelectedMetric(e.target.value)}\n                  data-testid=\"select-metric-filter\"\n                >\n                  <option value=\"\">Overall Rating</option>\n                  {metrics.map((metric) => (\n                    <option key={metric} value={metric.toLowerCase()}>\n                      {metric}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </CardContent>\n        </MotionCard>\n\n        {/* Leaderboard Tabs */}\n        <Tabs defaultValue=\"national\" className=\"mb-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"national\" data-testid=\"tab-national\">National</TabsTrigger>\n            <TabsTrigger value=\"state\" data-testid=\"tab-state\">State</TabsTrigger>\n            <TabsTrigger value=\"local\" data-testid=\"tab-local\">Local</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"national\" className=\"mt-6\">\n            <MotionCard delay={0.3}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-xl font-heading font-bold\">\n                  <Trophy className=\"w-6 h-6 mr-2 text-primary\" />\n                  National Rankings\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {leaderboardLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(10)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse p-4 border border-border rounded-lg\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                          <div className=\"flex-1 space-y-2\">\n                            <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                            <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                          </div>\n                          <div className=\"h-6 bg-muted rounded w-16\"></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {leaderboard?.slice(0, 20).map((athlete: any, index: number) => {\n                      const rank = index + 1;\n                      return (\n                        <motion.div\n                          key={athlete.athleteId}\n                          initial={{ opacity: 0, x: -20 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ duration: 0.5, delay: index * 0.05 }}\n                          className={`p-4 border border-border rounded-lg transition-all hover-glow ${getRankColor(rank)}`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"flex items-center justify-center w-12 h-12\">\n                                {getRankIcon(rank)}\n                              </div>\n                              \n                              <Avatar className=\"w-12 h-12\">\n                                <AvatarImage src={`/athlete-${rank}.jpg`} alt=\"Athlete\" />\n                                <AvatarFallback className=\"bg-muted text-foreground\">\n                                  {athlete.athleteName?.charAt(0) || \"A\"}\n                                </AvatarFallback>\n                              </Avatar>\n                              \n                              <div>\n                                <h3 className=\"font-medium text-foreground\">\n                                  {athlete.athleteName || `Athlete #${athlete.athleteId?.slice(-4)}`}\n                                </h3>\n                                <div className=\"flex items-center text-sm text-muted-foreground\">\n                                  <Trophy className=\"w-3 h-3 mr-1\" />\n                                  {athlete.sport || \"Multi-Sport\"}\n                                  {athlete.location && (\n                                    <>\n                                      <span className=\"mx-2\">•</span>\n                                      <MapPin className=\"w-3 h-3 mr-1\" />\n                                      {athlete.location}\n                                    </>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"text-right\">\n                              <div className=\"flex items-center\">\n                                <Star className=\"w-4 h-4 text-secondary mr-1\" />\n                                <span className=\"text-lg font-bold text-foreground\">\n                                  {parseFloat(athlete.rating || \"0\").toFixed(1)}\n                                </span>\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                Rating\n                              </div>\n                            </div>\n                          </div>\n                        </motion.div>\n                      );\n                    }) || (\n                      <div className=\"text-center py-12\">\n                        <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No athletes found</p>\n                        <p className=\"text-sm text-muted-foreground\">Try adjusting your filters</p>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </MotionCard>\n          </TabsContent>\n\n          <TabsContent value=\"state\" className=\"mt-6\">\n            <MotionCard delay={0.3}>\n              <CardContent className=\"p-6 text-center\">\n                <TrendingUp className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-heading font-bold text-foreground mb-2\">\n                  State Rankings Coming Soon\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  State-wise leaderboards are being prepared and will be available soon.\n                </p>\n              </CardContent>\n            </MotionCard>\n          </TabsContent>\n\n          <TabsContent value=\"local\" className=\"mt-6\">\n            <MotionCard delay={0.3}>\n              <CardContent className=\"p-6 text-center\">\n                <MapPin className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-heading font-bold text-foreground mb-2\">\n                  Local Rankings Coming Soon\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  City and district-wise rankings will be available once we have more local data.\n                </p>\n              </CardContent>\n            </MotionCard>\n          </TabsContent>\n        </Tabs>\n\n        {/* Call to Action */}\n        <MotionCard delay={0.4} className=\"text-center\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-heading font-bold text-foreground mb-2\">\n              Want to climb the rankings?\n            </h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Take more assessments to improve your performance score and move up the leaderboard.\n            </p>\n            <Link href=\"/assessment\">\n              <Button className=\"bg-primary hover:bg-primary/90 text-primary-foreground\">\n                <Trophy className=\"w-4 h-4 mr-2\" />\n                Take Assessment\n              </Button>\n            </Link>\n          </CardContent>\n        </MotionCard>\n      </main>\n    </div>\n  );\n}\n","size_bytes":19255},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/results.tsx":{"content":"import { useEffect } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport MotionCard from \"@/components/ui/motion-card\";\nimport ProgressRing from \"@/components/ui/progress-ring\";\nimport GlowingButton from \"@/components/ui/glowing-button\";\nimport { \n  ArrowLeft,\n  Trophy,\n  TrendingUp,\n  Target,\n  AlertTriangle,\n  CheckCircle,\n  Share,\n  Download,\n  Home,\n  Repeat,\n  Star,\n  Zap,\n  Award,\n  Lightbulb\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function Results() {\n  const { id } = useParams();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Get assessment data with results\n  const { data: assessment, isLoading: assessmentLoading, error } = useQuery({\n    queryKey: [\"/api/assessments\", id],\n    enabled: !!id && isAuthenticated,\n    retry: false,\n    refetchInterval: (data) => {\n      // Keep polling if status is processing\n      return data?.status === 'processing' ? 2000 : false;\n    }\n  });\n\n  // Handle errors\n  useEffect(() => {\n    if (error && isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  if (isLoading || assessmentLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"spinner mb-4\"></div>\n          <h2 className=\"text-xl font-heading font-bold text-primary\">KALA KAUSHAL</h2>\n          <p className=\"text-muted-foreground\">Loading your results...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!assessment) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-6 text-center\">\n            <AlertTriangle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n            <h2 className=\"text-xl font-heading font-bold text-foreground mb-2\">\n              Results Not Found\n            </h2>\n            <p className=\"text-muted-foreground mb-4\">\n              The assessment results you're looking for don't exist or are still being processed.\n            </p>\n            <Link href=\"/\">\n              <Button>Back to Dashboard</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Show processing state\n  if (assessment.status === 'processing') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <MotionCard className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <motion.div\n              animate={{ rotate: 360 }}\n              transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n              className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full mx-auto mb-6\"\n            />\n            <h2 className=\"text-2xl font-heading font-bold text-primary mb-2\">\n              AI Analysis in Progress\n            </h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Our advanced AI is analyzing your performance. This usually takes 30-60 seconds.\n            </p>\n            <div className=\"space-y-2 text-left\">\n              {[\n                \"Processing video footage...\",\n                \"Analyzing movement patterns...\",\n                \"Calculating performance metrics...\",\n                \"Generating insights...\"\n              ].map((step, index) => (\n                <motion.div\n                  key={step}\n                  initial={{ opacity: 0.3 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ \n                    duration: 0.5, \n                    delay: index * 0.5,\n                    repeat: Infinity,\n                    repeatType: \"reverse\"\n                  }}\n                  className=\"flex items-center text-sm text-muted-foreground\"\n                >\n                  <Zap className=\"w-4 h-4 mr-2 text-primary\" />\n                  {step}\n                </motion.div>\n              ))}\n            </div>\n          </CardContent>\n        </MotionCard>\n      </div>\n    );\n  }\n\n  // Show failed state\n  if (assessment.status === 'failed') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-6 text-center\">\n            <AlertTriangle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n            <h2 className=\"text-xl font-heading font-bold text-foreground mb-2\">\n              Analysis Failed\n            </h2>\n            <p className=\"text-muted-foreground mb-4\">\n              We couldn't analyze your video. This might be due to poor video quality or technical issues.\n            </p>\n            <div className=\"space-y-2\">\n              <Link href={`/assessment/${id}/record`}>\n                <Button className=\"w-full\">\n                  <Repeat className=\"w-4 h-4 mr-2\" />\n                  Try Recording Again\n                </Button>\n              </Link>\n              <Link href=\"/\">\n                <Button variant=\"outline\" className=\"w-full\">\n                  Back to Dashboard\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const results = assessment.aiAnalysisResults;\n  const performanceScore = results?.performanceScore || 0;\n  const metrics = assessment.metrics || results?.metrics || [];\n  const feedback = results?.feedback || \"Assessment completed successfully.\";\n  const formAnalysis = results?.formAnalysis || {};\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4 md:p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Link href=\"/\">\n            <Button \n              variant=\"ghost\" \n              className=\"mb-4 text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-back-dashboard\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"p-3 bg-accent/20 rounded-lg\">\n                <Trophy className=\"w-8 h-8 text-accent\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl md:text-3xl font-heading font-bold text-foreground\">\n                  Assessment Results\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  AI-powered performance analysis complete\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className=\"text-3xl font-bold text-primary\">{performanceScore}</div>\n              <div className=\"text-sm text-muted-foreground\">Overall Score</div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Celebration Animation */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"fixed inset-0 pointer-events-none z-50\"\n      >\n        {/* Confetti particles would be animated here */}\n        {[...Array(20)].map((_, i) => (\n          <motion.div\n            key={i}\n            initial={{ \n              opacity: 1, \n              y: -10, \n              x: Math.random() * window.innerWidth,\n              rotate: 0 \n            }}\n            animate={{ \n              y: window.innerHeight + 100, \n              rotate: 360,\n              opacity: 0 \n            }}\n            transition={{ \n              duration: 3, \n              delay: i * 0.1,\n              ease: \"linear\"\n            }}\n            className=\"absolute w-3 h-3 bg-accent rounded-full\"\n            style={{\n              left: Math.random() * 100 + '%',\n            }}\n          />\n        ))}\n      </motion.div>\n\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto p-4 md:p-6\">\n        \n        {/* Performance Overview */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <MotionCard delay={0.1} className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-xl font-heading font-bold\">\n                <TrendingUp className=\"w-6 h-6 mr-2 text-primary\" />\n                Performance Summary\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"text-center\">\n                  <ProgressRing \n                    value={performanceScore} \n                    size={160} \n                    strokeWidth={8}\n                    className=\"mb-4\"\n                  />\n                  <h3 className=\"text-2xl font-bold text-primary mb-1\">\n                    {performanceScore}/100\n                  </h3>\n                  <p className=\"text-muted-foreground\">Overall Performance</p>\n                  <div className=\"flex justify-center mt-2\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star\n                        key={i}\n                        className={`w-5 h-5 ${\n                          i < Math.floor(performanceScore / 20) \n                            ? \"text-secondary fill-current\" \n                            : \"text-muted-foreground\"\n                        }`}\n                      />\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold text-foreground mb-2\">AI Analysis Summary</h4>\n                    <p className=\"text-muted-foreground text-sm leading-relaxed\">\n                      {feedback}\n                    </p>\n                  </div>\n                  \n                  {formAnalysis.overallForm && (\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-foreground\">Technique Score</span>\n                        <span className=\"text-muted-foreground\">{formAnalysis.overallForm}%</span>\n                      </div>\n                      <Progress value={formAnalysis.overallForm} className=\"h-2\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </MotionCard>\n          \n          {/* Quick Actions */}\n          <MotionCard delay={0.2}>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-heading font-bold\">What's Next?</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Link href=\"/assessment\">\n                <GlowingButton className=\"w-full\" data-testid=\"button-take-another\">\n                  <Repeat className=\"w-4 h-4 mr-2\" />\n                  Take Another Test\n                </GlowingButton>\n              </Link>\n              \n              <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-share-results\">\n                <Share className=\"w-4 h-4 mr-2\" />\n                Share Results\n              </Button>\n              \n              <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-download-report\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Download Report\n              </Button>\n              \n              <Link href=\"/\">\n                <Button variant=\"ghost\" className=\"w-full\">\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Back to Dashboard\n                </Button>\n              </Link>\n            </CardContent>\n          </MotionCard>\n        </div>\n\n        {/* Detailed Metrics */}\n        {metrics.length > 0 && (\n          <MotionCard delay={0.3} className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-xl font-heading font-bold\">\n                <Target className=\"w-6 h-6 mr-2 text-secondary\" />\n                Detailed Metrics\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {metrics.map((metric: any, index: number) => (\n                  <motion.div\n                    key={metric.name || index}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                    className=\"text-center p-4 bg-muted/50 rounded-lg hover-glow\"\n                  >\n                    <div className=\"text-2xl font-bold text-primary mb-1\">\n                      {metric.value || \"N/A\"}\n                    </div>\n                    <div className=\"text-sm text-foreground mb-1\">\n                      {metric.name || \"Metric\"}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {metric.unit && `(${metric.unit})`}\n                    </div>\n                    {metric.confidence && (\n                      <div className=\"mt-2\">\n                        <Progress value={metric.confidence * 100} className=\"h-1\" />\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          {(metric.confidence * 100).toFixed(0)}% confidence\n                        </div>\n                      </div>\n                    )}\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </MotionCard>\n        )}\n\n        {/* Form Analysis */}\n        {(formAnalysis.strengths?.length > 0 || formAnalysis.improvements?.length > 0) && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n            {/* Strengths */}\n            {formAnalysis.strengths?.length > 0 && (\n              <MotionCard delay={0.4}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-lg font-heading font-bold text-accent\">\n                    <CheckCircle className=\"w-5 h-5 mr-2\" />\n                    Strengths\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-3\">\n                    {formAnalysis.strengths.map((strength: string, index: number) => (\n                      <motion.li\n                        key={index}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ duration: 0.5, delay: index * 0.1 }}\n                        className=\"flex items-start gap-3\"\n                      >\n                        <div className=\"w-6 h-6 bg-accent/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                          <CheckCircle className=\"w-4 h-4 text-accent\" />\n                        </div>\n                        <p className=\"text-foreground\">{strength}</p>\n                      </motion.li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </MotionCard>\n            )}\n\n            {/* Areas for Improvement */}\n            {formAnalysis.improvements?.length > 0 && (\n              <MotionCard delay={0.5}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-lg font-heading font-bold text-secondary\">\n                    <Lightbulb className=\"w-5 h-5 mr-2\" />\n                    Areas for Improvement\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-3\">\n                    {formAnalysis.improvements.map((improvement: string, index: number) => (\n                      <motion.li\n                        key={index}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ duration: 0.5, delay: index * 0.1 }}\n                        className=\"flex items-start gap-3\"\n                      >\n                        <div className=\"w-6 h-6 bg-secondary/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                          <Lightbulb className=\"w-4 h-4 text-secondary\" />\n                        </div>\n                        <p className=\"text-foreground\">{improvement}</p>\n                      </motion.li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </MotionCard>\n            )}\n          </div>\n        )}\n\n        {/* Achievement Unlocked */}\n        {performanceScore >= 80 && (\n          <MotionCard \n            delay={0.6}\n            className=\"bg-gradient-to-r from-accent/20 to-primary/20 border-accent/50\"\n          >\n            <CardContent className=\"p-6 text-center\">\n              <motion.div\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ \n                  duration: 0.5, \n                  delay: 1,\n                  type: \"spring\",\n                  stiffness: 200\n                }}\n              >\n                <Award className=\"w-16 h-16 text-accent mx-auto mb-4 animate-float\" />\n              </motion.div>\n              <h3 className=\"text-xl font-heading font-bold text-foreground mb-2\">\n                🎉 Achievement Unlocked!\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Outstanding Performance - You scored {performanceScore}% and earned a new badge!\n              </p>\n              <Badge className=\"bg-accent text-accent-foreground px-4 py-2\">\n                High Performer\n              </Badge>\n            </CardContent>\n          </MotionCard>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":19036},"client/src/pages/scout-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport DesktopSidebar from \"@/components/layout/desktop-sidebar\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport AthleteCard from \"@/components/athlete-card\";\nimport PerformanceChart from \"@/components/performance-chart\";\nimport ProgressRing from \"@/components/ui/progress-ring\";\nimport { \n  Search, \n  Users, \n  Video, \n  Trophy, \n  Eye, \n  ArrowUp, \n  Download, \n  BarChart3,\n  Plus,\n  Bell,\n  Globe\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function ScoutDashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedSport, setSelectedSport] = useState(\"\");\n  const [selectedLocation, setSelectedLocation] = useState(\"\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Dashboard statistics\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  // Top athletes\n  const { data: topAthletes, isLoading: athletesLoading } = useQuery({\n    queryKey: [\"/api/athletes/top/6\"],\n    retry: false,\n  });\n\n  // Search athletes\n  const { data: searchResults, isLoading: searchLoading } = useQuery({\n    queryKey: [\"/api/athletes\", `search=${searchQuery}&sport=${selectedSport}&location=${selectedLocation}`],\n    enabled: !!(searchQuery || selectedSport || selectedLocation),\n    retry: false,\n  });\n\n  // Scout activity\n  const { data: scoutActivity } = useQuery({\n    queryKey: [\"/api/scout/activity\"],\n    retry: false,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"spinner mb-4\"></div>\n          <h2 className=\"text-xl font-heading font-bold text-primary\">KALA KAUSHAL</h2>\n          <p className=\"text-muted-foreground\">Loading Dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleSearch = () => {\n    // Trigger search by updating query keys\n    console.log(\"Searching for:\", { searchQuery, selectedSport, selectedLocation });\n  };\n\n  const quickActions = [\n    {\n      title: \"New Assessment\",\n      description: \"Create a new talent assessment\",\n      icon: <Plus className=\"h-6 w-6\" />,\n      color: \"bg-primary/10 text-primary border-primary/30\",\n      action: () => console.log(\"New assessment\")\n    },\n    {\n      title: \"Export Data\",\n      description: \"Download athlete reports\",\n      icon: <Download className=\"h-6 w-6\" />,\n      color: \"bg-secondary/10 text-secondary border-secondary/30\",\n      action: () => console.log(\"Export data\")\n    },\n    {\n      title: \"View Analytics\", \n      description: \"Detailed performance insights\",\n      icon: <BarChart3 className=\"h-6 w-6\" />,\n      color: \"bg-accent/10 text-accent border-accent/30\",\n      action: () => console.log(\"View analytics\")\n    }\n  ];\n\n  const sportFilters = [\"Cricket\", \"Football\", \"Athletics\", \"Basketball\", \"Volleyball\", \"Tennis\"];\n  const locationFilters = [\"All Locations\", \"Mumbai\", \"Delhi\", \"Bangalore\", \"Chennai\", \"Kolkata\", \"Hyderabad\", \"Pune\", \"Ahmedabad\", \"Jaipur\", \"Lucknow\", \"Kanpur\", \"Nagpur\", \"Indore\", \"Bhopal\", \"Visakhapatnam\", \"Patna\"];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Desktop Sidebar */}\n      <DesktopSidebar userRole=\"scout\" />\n      \n      {/* Mobile Navigation */}\n      <MobileNav userRole=\"scout\" />\n\n      {/* Main Content */}\n      <div className=\"md:ml-64 min-h-screen\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border p-4 md:p-6\">\n          <div className=\"flex items-center justify-between\">\n            {/* Mobile Logo */}\n            <div className=\"md:hidden\">\n              <h1 className=\"font-heading text-xl font-bold text-primary\">KALA KAUSHAL</h1>\n            </div>\n            \n            {/* Desktop Header */}\n            <div className=\"hidden md:block\">\n              <h2 className=\"text-2xl font-heading font-bold text-foreground\">AI Sports Assessment Dashboard</h2>\n              <p className=\"text-muted-foreground mt-1 typewriter\">Discover and nurture athletic talent across India</p>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Language Selector */}\n              <div className=\"relative\">\n                <select \n                  className=\"bg-muted text-foreground border border-border rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary\"\n                  data-testid=\"select-language\"\n                >\n                  <option>🇬🇧 English</option>\n                  <option>🇮🇳 हिंदी</option>\n                  <option>🇮🇳 ગુજરાતી</option>\n                </select>\n              </div>\n              \n              {/* Notifications */}\n              <button \n                className=\"relative p-2 text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid=\"button-notifications\"\n              >\n                <Bell className=\"h-5 w-5\" />\n                <span className=\"absolute -top-1 -right-1 bg-secondary text-secondary-foreground rounded-full text-xs w-5 h-5 flex items-center justify-center\">\n                  3\n                </span>\n              </button>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <main className=\"p-4 md:p-6 pb-20 md:pb-6\">\n          \n          {/* Stats Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-6\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              <Card className=\"glow-border hover-glow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-primary/20 rounded-lg\">\n                      <Users className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-muted-foreground text-sm\">Total Athletes</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-athletes\">\n                        {(stats as any)?.totalAthletes?.toLocaleString() || \"12,847\"}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"mt-4 flex items-center text-sm\">\n                    <ArrowUp className=\"h-4 w-4 text-success mr-1\" />\n                    <span className=\"text-success\">{(stats as any)?.growthStats?.athletes || \"+12%\"}</span>\n                    <span className=\"text-muted-foreground ml-1\">this month</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 0.1 }}\n            >\n              <Card className=\"glow-border hover-glow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-secondary/20 rounded-lg\">\n                      <Video className=\"h-6 w-6 text-secondary\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-muted-foreground text-sm\">Assessments</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-assessments\">\n                        {(stats as any)?.totalAssessments?.toLocaleString() || \"8,932\"}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"mt-4 flex items-center text-sm\">\n                    <ArrowUp className=\"h-4 w-4 text-success mr-1\" />\n                    <span className=\"text-success\">{(stats as any)?.growthStats?.assessments || \"+18%\"}</span>\n                    <span className=\"text-muted-foreground ml-1\">this week</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 0.2 }}\n            >\n              <Card className=\"glow-border hover-glow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-accent/20 rounded-lg\">\n                      <Trophy className=\"h-6 w-6 text-accent\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-muted-foreground text-sm\">Top Performers</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-top-performers\">\n                        {(stats as any)?.topPerformers?.toLocaleString() || \"1,203\"}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"mt-4 flex items-center text-sm\">\n                    <ArrowUp className=\"h-4 w-4 text-success mr-1\" />\n                    <span className=\"text-success\">{(stats as any)?.growthStats?.performers || \"+8%\"}</span>\n                    <span className=\"text-muted-foreground ml-1\">identified</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 0.3 }}\n            >\n              <Card className=\"glow-border hover-glow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-primary/20 rounded-lg\">\n                      <Eye className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-muted-foreground text-sm\">Scout Views</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-scout-views\">\n                        {(stats as any)?.scoutViews?.toLocaleString() || \"24,567\"}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"mt-4 flex items-center text-sm\">\n                    <ArrowUp className=\"h-4 w-4 text-success mr-1\" />\n                    <span className=\"text-success\">{(stats as any)?.growthStats?.views || \"+25%\"}</span>\n                    <span className=\"text-muted-foreground ml-1\">this month</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n\n          {/* Search and Quick Actions */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n            {/* Search Athletes */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"glow-border\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-heading font-bold text-foreground\">Find Athletes</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex flex-col md:flex-row gap-4\">\n                    <div className=\"flex-1\">\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Search by name, location, sport...\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        className=\"bg-input border-border text-foreground placeholder-muted-foreground\"\n                        data-testid=\"input-search-athletes\"\n                      />\n                    </div>\n                    <div className=\"w-full md:w-48\">\n                      <select\n                        value={selectedLocation}\n                        onChange={(e) => setSelectedLocation(e.target.value === \"All Locations\" ? \"\" : e.target.value)}\n                        className=\"w-full bg-input border border-border text-foreground rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary\"\n                        data-testid=\"select-location\"\n                      >\n                        {locationFilters.map((location) => (\n                          <option key={location} value={location}>\n                            {location}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                    <Button \n                      onClick={handleSearch}\n                      className=\"bg-primary hover:bg-primary/90 text-primary-foreground ripple hover-glow\"\n                      data-testid=\"button-search\"\n                    >\n                      <Search className=\"mr-2 h-4 w-4\" />\n                      Search\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex flex-wrap gap-2\">\n                    {sportFilters.map((sport) => (\n                      <Badge\n                        key={sport}\n                        variant={selectedSport === sport ? \"default\" : \"outline\"}\n                        className={`cursor-pointer transition-colors ${\n                          selectedSport === sport \n                            ? \"bg-secondary text-secondary-foreground\" \n                            : \"hover:bg-muted/80\"\n                        }`}\n                        onClick={() => setSelectedSport(selectedSport === sport ? \"\" : sport)}\n                        data-testid={`badge-sport-${sport.toLowerCase()}`}\n                      >\n                        {sport}\n                      </Badge>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Actions */}\n            <div>\n              <Card className=\"glow-border\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-heading font-bold text-foreground\">Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {quickActions.map((action, index) => (\n                    <Button\n                      key={index}\n                      variant=\"outline\"\n                      className={`w-full justify-start h-auto p-4 ${action.color} hover-glow`}\n                      onClick={action.action}\n                      data-testid={`button-${action.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <div className=\"flex items-center\">\n                        {action.icon}\n                        <div className=\"ml-3 text-left\">\n                          <div className=\"font-medium\">{action.title}</div>\n                          <div className=\"text-xs opacity-80\">{action.description}</div>\n                        </div>\n                      </div>\n                    </Button>\n                  ))}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Content Tabs */}\n          <Tabs defaultValue=\"athletes\" className=\"mb-6\">\n            <TabsList className=\"grid w-full grid-cols-3 lg:w-auto\">\n              <TabsTrigger value=\"athletes\" data-testid=\"tab-athletes\">Top Athletes</TabsTrigger>\n              <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n              <TabsTrigger value=\"activity\" data-testid=\"tab-activity\">Recent Activity</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"athletes\" className=\"mt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {athletesLoading ? (\n                  [...Array(6)].map((_, i) => (\n                    <Card key={i} className=\"animate-pulse\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center space-x-4 mb-4\">\n                          <div className=\"w-16 h-16 bg-muted rounded-full\"></div>\n                          <div className=\"space-y-2\">\n                            <div className=\"h-4 bg-muted rounded w-24\"></div>\n                            <div className=\"h-3 bg-muted rounded w-32\"></div>\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <div className=\"h-2 bg-muted rounded\"></div>\n                          <div className=\"h-2 bg-muted rounded w-3/4\"></div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  (topAthletes as any)?.map((athlete: any, index: number) => (\n                    <motion.div\n                      key={athlete.id}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.5, delay: index * 0.1 }}\n                    >\n                      <AthleteCard athlete={athlete} />\n                    </motion.div>\n                  ))\n                )}\n              </div>\n\n              {/* Search Results */}\n              {(searchQuery || selectedSport || selectedLocation) && (\n                <div className=\"mt-8\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <h3 className=\"text-lg font-heading font-bold text-foreground\">\n                      Search Results\n                    </h3>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSearchQuery(\"\");\n                        setSelectedSport(\"\");\n                        setSelectedLocation(\"\");\n                      }}\n                      className=\"text-muted-foreground hover:text-foreground\"\n                      data-testid=\"button-clear-filters\"\n                    >\n                      Clear Filters\n                    </Button>\n                  </div>\n                  \n                  {/* Active Filters Display */}\n                  <div className=\"flex flex-wrap gap-2 mb-4\">\n                    {searchQuery && (\n                      <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                        Query: \"{searchQuery}\"\n                      </Badge>\n                    )}\n                    {selectedSport && (\n                      <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                        Sport: {selectedSport}\n                      </Badge>\n                    )}\n                    {selectedLocation && (\n                      <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                        Location: {selectedLocation}\n                      </Badge>\n                    )}\n                  </div>\n\n                  {searchLoading ? (\n                    <div className=\"text-center py-12\">\n                      <div className=\"spinner mb-4\"></div>\n                      <p className=\"text-muted-foreground\">Searching athletes...</p>\n                      <p className=\"text-sm text-muted-foreground mt-2\">\n                        Analyzing {(searchQuery || selectedSport || selectedLocation) ? \"your criteria\" : \"all athletes\"}\n                      </p>\n                    </div>\n                  ) : (\n                    <>\n                      {(searchResults as any)?.length > 0 ? (\n                        <>\n                          <div className=\"text-sm text-muted-foreground mb-4\">\n                            Found {(searchResults as any).length} athlete{(searchResults as any).length !== 1 ? 's' : ''}\n                          </div>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                            {(searchResults as any).map((athlete: any) => (\n                              <AthleteCard key={athlete.id} athlete={athlete} />\n                            ))}\n                          </div>\n                        </>\n                      ) : (\n                        <Card className=\"border-dashed border-2 border-muted\">\n                          <CardContent className=\"text-center py-12\">\n                            <div className=\"mx-auto w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n                              <Search className=\"w-8 h-8 text-muted-foreground\" />\n                            </div>\n                            <h4 className=\"text-lg font-semibold text-foreground mb-2\">\n                              No Athletes Found\n                            </h4>\n                            <p className=\"text-muted-foreground mb-4 max-w-md mx-auto\">\n                              We couldn't find any athletes matching your current search criteria. \n                              Try adjusting your filters or search terms.\n                            </p>\n                            \n                            {/* Suggestions */}\n                            <div className=\"space-y-2 text-sm text-muted-foreground mb-6\">\n                              <p className=\"font-medium\">Try:</p>\n                              <ul className=\"space-y-1\">\n                                <li>• Searching with different keywords</li>\n                                <li>• Selecting a different sport or location</li>\n                                <li>• Clearing all filters to see all athletes</li>\n                              </ul>\n                            </div>\n\n                            <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                              <Button\n                                variant=\"outline\"\n                                onClick={() => {\n                                  setSearchQuery(\"\");\n                                  setSelectedSport(\"\");\n                                  setSelectedLocation(\"\");\n                                }}\n                                data-testid=\"button-clear-all-filters\"\n                              >\n                                <Globe className=\"w-4 h-4 mr-2\" />\n                                View All Athletes\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                onClick={() => setSearchQuery(\"\")}\n                                disabled={!searchQuery}\n                                data-testid=\"button-clear-search\"\n                              >\n                                Clear Search Only\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      )}\n                    </>\n                  )}\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"analytics\" className=\"mt-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Performance Analytics */}\n                <Card className=\"glow-border\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg font-heading font-bold text-foreground\">Performance Analytics</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      <div className=\"text-center\">\n                        <ProgressRing value={80} size={128} strokeWidth={4} />\n                        <div className=\"mt-4\">\n                          <div className=\"text-2xl font-bold text-primary\">80%</div>\n                          <div className=\"text-sm text-muted-foreground\">Overall Score</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4 text-center\">\n                        <div className=\"bg-primary/10 p-3 rounded-lg\">\n                          <div className=\"text-lg font-bold text-primary\">1,234</div>\n                          <div className=\"text-xs text-muted-foreground\">Tests Completed</div>\n                        </div>\n                        <div className=\"bg-secondary/10 p-3 rounded-lg\">\n                          <div className=\"text-lg font-bold text-secondary\">89%</div>\n                          <div className=\"text-xs text-muted-foreground\">Avg Performance</div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Performance Chart */}\n                <Card className=\"glow-border\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg font-heading font-bold text-foreground\">Performance Trends</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <PerformanceChart />\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"activity\" className=\"mt-6\">\n              <Card className=\"glow-border\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-heading font-bold text-foreground\">Recent Activity</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {[\n                      {\n                        event: \"New athlete registered from Chennai\",\n                        time: \"2 minutes ago\",\n                        color: \"bg-accent\"\n                      },\n                      {\n                        event: \"Sprint assessment completed by Rakesh Kumar\",\n                        time: \"15 minutes ago\", \n                        color: \"bg-primary\"\n                      },\n                      {\n                        event: \"Scout viewed 5 basketball profiles\",\n                        time: \"1 hour ago\",\n                        color: \"bg-secondary\"\n                      },\n                      {\n                        event: \"Vertical jump record broken in Maharashtra\",\n                        time: \"3 hours ago\",\n                        color: \"bg-accent\"\n                      },\n                      {\n                        event: \"AI model updated with new detection algorithms\",\n                        time: \"6 hours ago\",\n                        color: \"bg-primary\"\n                      }\n                    ].map((activity, index) => (\n                      <motion.div\n                        key={index}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ duration: 0.5, delay: index * 0.1 }}\n                        className=\"flex items-center space-x-3\"\n                      >\n                        <div className={`w-2 h-2 ${activity.color} rounded-full animate-glow`}></div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm text-foreground\">{activity.event}</p>\n                          <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                        </div>\n                      </motion.div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":28692},"client/src/pages/video-recording.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport VideoRecorder from \"@/components/video-recorder\";\nimport MotionCard from \"@/components/ui/motion-card\";\nimport GlowingButton from \"@/components/ui/glowing-button\";\nimport { \n  ArrowLeft,\n  Camera,\n  Play,\n  Square,\n  RotateCcw,\n  Upload,\n  CheckCircle,\n  AlertCircle,\n  Clock,\n  Zap\n} from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ntype RecordingState = 'setup' | 'countdown' | 'recording' | 'recorded' | 'uploading' | 'processing' | 'completed';\n\nexport default function VideoRecording() {\n  const { id } = useParams();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  \n  const [recordingState, setRecordingState] = useState<RecordingState>('setup');\n  const [countdown, setCountdown] = useState(0);\n  const [recordedBlob, setRecordedBlob] = useState<Blob | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Get assessment data\n  const { data: assessment, isLoading: assessmentLoading, error } = useQuery({\n    queryKey: [\"/api/assessments\", id],\n    enabled: !!id && isAuthenticated,\n    retry: false,\n  });\n\n  // Upload video mutation\n  const uploadVideoMutation = useMutation({\n    mutationFn: async (videoBlob: Blob) => {\n      const formData = new FormData();\n      formData.append('video', videoBlob, 'assessment.mp4');\n      \n      const response = await fetch(`/api/assessments/${id}/upload-video`, {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (result) => {\n      setRecordingState('completed');\n      queryClient.invalidateQueries({ queryKey: [\"/api/assessments\", id] });\n      toast({\n        title: \"Video Analyzed!\",\n        description: \"Your assessment has been processed successfully.\",\n      });\n      \n      // Redirect to results after a delay\n      setTimeout(() => {\n        window.location.href = `/results/${id}`;\n      }, 2000);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      setRecordingState('recorded');\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload video. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle errors\n  useEffect(() => {\n    if (error && isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  const startCountdown = () => {\n    setRecordingState('countdown');\n    setCountdown(3);\n    \n    const timer = setInterval(() => {\n      setCountdown((prev) => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          setRecordingState('recording');\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const handleRecordingComplete = (blob: Blob) => {\n    setRecordedBlob(blob);\n    setRecordingState('recorded');\n  };\n\n  const handleUpload = () => {\n    if (recordedBlob) {\n      setRecordingState('uploading');\n      setUploadProgress(0);\n      \n      // Simulate upload progress\n      const progressTimer = setInterval(() => {\n        setUploadProgress((prev) => {\n          if (prev >= 95) {\n            clearInterval(progressTimer);\n            return 95;\n          }\n          return prev + Math.random() * 10;\n        });\n      }, 200);\n      \n      uploadVideoMutation.mutate(recordedBlob);\n    }\n  };\n\n  const handleRetake = () => {\n    setRecordedBlob(null);\n    setRecordingState('setup');\n    setUploadProgress(0);\n  };\n\n  if (isLoading || assessmentLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"spinner mb-4\"></div>\n          <h2 className=\"text-xl font-heading font-bold text-primary\">KALA KAUSHAL</h2>\n          <p className=\"text-muted-foreground\">Loading assessment...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!assessment) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-6 text-center\">\n            <AlertCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n            <h2 className=\"text-xl font-heading font-bold text-foreground mb-2\">\n              Assessment Not Found\n            </h2>\n            <p className=\"text-muted-foreground mb-4\">\n              The assessment you're looking for doesn't exist or has been removed.\n            </p>\n            <Button onClick={() => window.history.back()}>\n              Go Back\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4 md:p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => window.history.back()}\n            className=\"mb-4 text-muted-foreground hover:text-foreground\"\n            disabled={recordingState === 'recording' || recordingState === 'uploading'}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          \n          <div className=\"flex items-center gap-4\">\n            <div className=\"p-3 bg-primary/20 rounded-lg\">\n              <Camera className=\"w-8 h-8 text-primary\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl md:text-3xl font-heading font-bold text-foreground\">\n                Video Assessment\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Record your performance for AI analysis\n              </p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-4xl mx-auto p-4 md:p-6\">\n        \n        {/* Status Indicator */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            {['setup', 'countdown', 'recording', 'recorded', 'uploading', 'completed'].map((state, index) => (\n              <div\n                key={state}\n                className={`w-3 h-3 rounded-full transition-colors ${\n                  recordingState === state \n                    ? 'bg-primary animate-glow' \n                    : index < ['setup', 'countdown', 'recording', 'recorded', 'uploading', 'completed'].indexOf(recordingState)\n                    ? 'bg-accent'\n                    : 'bg-muted'\n                }`}\n              />\n            ))}\n          </div>\n          <p className=\"text-center text-sm text-muted-foreground\">\n            {recordingState === 'setup' && 'Position camera and prepare to record'}\n            {recordingState === 'countdown' && 'Get ready...'}\n            {recordingState === 'recording' && 'Recording in progress'}\n            {recordingState === 'recorded' && 'Recording complete - review and upload'}\n            {recordingState === 'uploading' && 'Uploading video for analysis'}\n            {recordingState === 'processing' && 'AI analyzing your performance'}\n            {recordingState === 'completed' && 'Analysis complete!'}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Video Recording Area */}\n          <div className=\"lg:col-span-2\">\n            <MotionCard delay={0.1}>\n              <CardContent className=\"p-6\">\n                <div className=\"relative aspect-video bg-muted rounded-lg overflow-hidden\">\n                  {/* Countdown Overlay */}\n                  <AnimatePresence>\n                    {recordingState === 'countdown' && countdown > 0 && (\n                      <motion.div\n                        initial={{ opacity: 0, scale: 0.5 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        exit={{ opacity: 0, scale: 1.5 }}\n                        className=\"absolute inset-0 flex items-center justify-center bg-black/50 z-10\"\n                      >\n                        <div className=\"text-8xl font-bold text-primary animate-glow\">\n                          {countdown}\n                        </div>\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n\n                  {/* Recording Indicator */}\n                  {recordingState === 'recording' && (\n                    <div className=\"absolute top-4 right-4 flex items-center gap-2 bg-destructive/90 text-destructive-foreground px-3 py-1 rounded-full z-10\">\n                      <div className=\"w-3 h-3 bg-destructive-foreground rounded-full animate-pulse\"></div>\n                      <span className=\"text-sm font-medium\">REC</span>\n                    </div>\n                  )}\n\n                  {/* Video Recorder Component */}\n                  <VideoRecorder\n                    isRecording={recordingState === 'recording'}\n                    onRecordingComplete={handleRecordingComplete}\n                    recordedBlob={recordedBlob}\n                  />\n\n                  {/* Skeleton Guide Overlay */}\n                  {recordingState === 'setup' && (\n                    <div className=\"absolute inset-0 pointer-events-none\">\n                      <div className=\"skeleton-overlay animate-pulse\" />\n                      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-primary/90 text-primary-foreground px-4 py-2 rounded-lg text-sm\">\n                        Position yourself within the guide\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Controls */}\n                <div className=\"flex justify-center mt-6 space-x-4\">\n                  {recordingState === 'setup' && (\n                    <GlowingButton \n                      onClick={startCountdown}\n                      size=\"lg\"\n                      data-testid=\"button-start-recording\"\n                    >\n                      <Play className=\"w-5 h-5 mr-2\" />\n                      Start Recording\n                    </GlowingButton>\n                  )}\n\n                  {recordingState === 'recorded' && (\n                    <>\n                      <Button \n                        variant=\"outline\" \n                        onClick={handleRetake}\n                        data-testid=\"button-retake\"\n                      >\n                        <RotateCcw className=\"w-4 h-4 mr-2\" />\n                        Retake\n                      </Button>\n                      <GlowingButton \n                        onClick={handleUpload}\n                        data-testid=\"button-upload\"\n                      >\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Upload & Analyze\n                      </GlowingButton>\n                    </>\n                  )}\n\n                  {recordingState === 'uploading' && (\n                    <div className=\"w-full max-w-md\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Zap className=\"w-4 h-4 text-primary\" />\n                        <span className=\"text-sm font-medium text-foreground\">\n                          Uploading & Analyzing...\n                        </span>\n                      </div>\n                      <Progress value={uploadProgress} className=\"h-2\" />\n                      <p className=\"text-xs text-muted-foreground mt-1 text-center\">\n                        {uploadProgress.toFixed(0)}% complete\n                      </p>\n                    </div>\n                  )}\n\n                  {recordingState === 'completed' && (\n                    <div className=\"text-center\">\n                      <CheckCircle className=\"w-12 h-12 text-accent mx-auto mb-2\" />\n                      <p className=\"text-foreground font-medium\">Analysis Complete!</p>\n                      <p className=\"text-sm text-muted-foreground\">Redirecting to results...</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </MotionCard>\n          </div>\n\n          {/* Instructions Sidebar */}\n          <div className=\"space-y-6\">\n            <MotionCard delay={0.2}>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-heading font-bold\">Recording Tips</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 text-sm\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-primary text-xs font-bold\">1</span>\n                  </div>\n                  <p className=\"text-muted-foreground\">\n                    Position yourself within the skeleton guide outline\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-primary text-xs font-bold\">2</span>\n                  </div>\n                  <p className=\"text-muted-foreground\">\n                    Ensure good lighting and stable camera position\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-primary text-xs font-bold\">3</span>\n                  </div>\n                  <p className=\"text-muted-foreground\">\n                    Follow the countdown and perform your best\n                  </p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-primary text-xs font-bold\">4</span>\n                  </div>\n                  <p className=\"text-muted-foreground\">\n                    Recording will stop automatically after the test duration\n                  </p>\n                </div>\n              </CardContent>\n            </MotionCard>\n\n            <MotionCard delay={0.3}>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-heading font-bold\">What Happens Next?</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 text-sm\">\n                <div className=\"flex items-center gap-3\">\n                  <Upload className=\"w-5 h-5 text-secondary\" />\n                  <span className=\"text-muted-foreground\">Video uploaded securely</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Zap className=\"w-5 h-5 text-primary\" />\n                  <span className=\"text-muted-foreground\">AI analyzes your performance</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <CheckCircle className=\"w-5 h-5 text-accent\" />\n                  <span className=\"text-muted-foreground\">Detailed results generated</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Clock className=\"w-5 h-5 text-secondary\" />\n                  <span className=\"text-muted-foreground\">Typical analysis: 30-60 seconds</span>\n                </div>\n              </CardContent>\n            </MotionCard>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":17249},"client/src/components/layout/desktop-sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  BarChart3, \n  Users, \n  Video, \n  Trophy, \n  Settings, \n  Home, \n  Target,\n  User,\n  LogOut\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface DesktopSidebarProps {\n  userRole: \"athlete\" | \"scout\";\n}\n\nexport default function DesktopSidebar({ userRole }: DesktopSidebarProps) {\n  const [location] = useLocation();\n\n  const athleteNavItems = [\n    { icon: Home, label: \"Dashboard\", href: \"/\", testId: \"nav-dashboard\" },\n    { icon: Video, label: \"Assessments\", href: \"/assessment\", testId: \"nav-assessments\" },\n    { icon: Trophy, label: \"Leaderboards\", href: \"/leaderboard\", testId: \"nav-leaderboards\" },\n    { icon: Target, label: \"Goals\", href: \"/goals\", testId: \"nav-goals\" },\n    { icon: User, label: \"Profile\", href: \"/profile\", testId: \"nav-profile\" },\n    { icon: Settings, label: \"Settings\", href: \"/settings\", testId: \"nav-settings\" },\n  ];\n\n  const scoutNavItems = [\n    { icon: BarChart3, label: \"Dashboard\", href: \"/\", testId: \"nav-dashboard\" },\n    { icon: Users, label: \"Athletes\", href: \"/athletes\", testId: \"nav-athletes\" },\n    { icon: Video, label: \"Assessments\", href: \"/assessments\", testId: \"nav-assessments\" },\n    { icon: Trophy, label: \"Leaderboards\", href: \"/leaderboard\", testId: \"nav-leaderboards\" },\n    { icon: Settings, label: \"Settings\", href: \"/settings\", testId: \"nav-settings\" },\n  ];\n\n  const navItems = userRole === \"athlete\" ? athleteNavItems : scoutNavItems;\n\n  return (\n    <div className=\"hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0 bg-card border-r border-border\">\n      <div className=\"flex flex-col h-full\">\n        {/* Logo */}\n        <div className=\"p-6\">\n          <h1 className=\"font-heading text-2xl font-bold text-primary tracking-wide\">\n            KALA KAUSHAL\n          </h1>\n          <p className=\"text-muted-foreground text-sm mt-1\">\n            AI Sports Assessment\n          </p>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-4 space-y-2\">\n          {navItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href;\n\n            return (\n              <Link key={item.href} href={item.href}>\n                <a\n                  className={cn(\n                    \"flex items-center px-4 py-3 rounded-lg transition-all\",\n                    isActive\n                      ? \"text-primary bg-primary/10 hover-glow\"\n                      : \"text-muted-foreground hover:text-foreground hover:bg-muted\"\n                  )}\n                  data-testid={item.testId}\n                >\n                  <Icon className=\"mr-3\" size={20} />\n                  {item.label}\n                </a>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* User Profile */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <Avatar className=\"w-10 h-10\">\n              <AvatarImage src=\"/default-avatar.png\" alt=\"User\" />\n              <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                <User size={20} />\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground\">\n                {userRole === \"scout\" ? \"Scout Admin\" : \"Athlete\"}\n              </p>\n              <p className=\"text-xs text-muted-foreground truncate\">\n                {userRole === \"scout\" ? \"scout@kalakaushal.in\" : \"athlete@kalakaushal.in\"}\n              </p>\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n            onClick={() => window.location.href = \"/api/logout\"}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"mr-2\" size={16} />\n            Logout\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4157},"client/src/components/layout/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Video, Trophy, User, Plus, Users, BarChart3 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MobileNavProps {\n  userRole: \"athlete\" | \"scout\";\n}\n\nexport default function MobileNav({ userRole }: MobileNavProps) {\n  const [location] = useLocation();\n\n  const athleteNavItems = [\n    { icon: Home, label: \"Home\", href: \"/\", testId: \"nav-home\" },\n    { icon: Video, label: \"Tests\", href: \"/assessment\", testId: \"nav-tests\" },\n    { icon: Plus, label: \"Record\", href: \"/assessment\", testId: \"nav-record\", isMain: true },\n    { icon: Trophy, label: \"Rankings\", href: \"/leaderboard\", testId: \"nav-rankings\" },\n    { icon: User, label: \"Profile\", href: \"/profile\", testId: \"nav-profile\" },\n  ];\n\n  const scoutNavItems = [\n    { icon: BarChart3, label: \"Dashboard\", href: \"/\", testId: \"nav-dashboard\" },\n    { icon: Users, label: \"Athletes\", href: \"/athletes\", testId: \"nav-athletes\" },\n    { icon: Plus, label: \"Search\", href: \"/\", testId: \"nav-search\", isMain: true },\n    { icon: Trophy, label: \"Rankings\", href: \"/leaderboard\", testId: \"nav-rankings\" },\n    { icon: User, label: \"Profile\", href: \"/profile\", testId: \"nav-profile\" },\n  ];\n\n  const navItems = userRole === \"athlete\" ? athleteNavItems : scoutNavItems;\n\n  return (\n    <nav className=\"nav-mobile bg-card border-t border-border\">\n      <div className=\"flex justify-around items-center py-3\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          const isMain = item.isMain;\n\n          return (\n            <Link key={item.href} href={item.href}>\n              <button\n                className={cn(\n                  \"flex flex-col items-center space-y-1 transition-colors\",\n                  isMain\n                    ? \"text-primary\"\n                    : isActive\n                    ? \"text-primary\"\n                    : \"text-muted-foreground hover:text-primary\"\n                )}\n                data-testid={item.testId}\n              >\n                {isMain ? (\n                  <div className=\"bg-primary rounded-full p-2 animate-glow\">\n                    <Icon className=\"text-primary-foreground text-xl\" size={20} />\n                  </div>\n                ) : (\n                  <Icon size={20} />\n                )}\n                <span className=\"text-xs\">{item.label}</span>\n              </button>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2510},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/glowing-button.tsx":{"content":"import { forwardRef } from \"react\";\nimport { Button, ButtonProps } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface GlowingButtonProps extends ButtonProps {\n  glowColor?: string;\n  intensity?: \"low\" | \"medium\" | \"high\";\n}\n\nconst GlowingButton = forwardRef<HTMLButtonElement, GlowingButtonProps>(\n  ({ className, glowColor = \"hsl(var(--primary))\", intensity = \"medium\", children, ...props }, ref) => {\n    const getIntensityClass = () => {\n      switch (intensity) {\n        case \"low\":\n          return \"hover:shadow-md\";\n        case \"high\":\n          return \"hover:shadow-2xl animate-glow\";\n        default:\n          return \"hover:shadow-lg hover-glow\";\n      }\n    };\n\n    return (\n      <Button\n        ref={ref}\n        className={cn(\n          \"bg-primary hover:bg-primary/90 text-primary-foreground\",\n          \"ripple transition-all duration-300\",\n          \"border-2 border-transparent\",\n          \"hover:border-primary/30\",\n          getIntensityClass(),\n          className\n        )}\n        style={{\n          boxShadow: intensity === \"high\" \n            ? `0 0 20px ${glowColor}40, 0 0 40px ${glowColor}20`\n            : undefined\n        }}\n        {...props}\n      >\n        {children}\n      </Button>\n    );\n  }\n);\n\nGlowingButton.displayName = \"GlowingButton\";\n\nexport default GlowingButton;\n","size_bytes":1337},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/motion-card.tsx":{"content":"import { forwardRef } from \"react\";\nimport { motion, MotionProps } from \"framer-motion\";\nimport { Card, CardProps } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MotionCardProps extends CardProps {\n  // Motion-specific props\n  delay?: number;\n  variant?: 'default' | 'enhanced' | 'gradient' | 'interactive';\n  enableHover?: boolean;\n  // Override framer-motion props to allow custom defaults\n  initial?: MotionProps['initial'];\n  animate?: MotionProps['animate'];\n  transition?: MotionProps['transition'];\n  whileHover?: MotionProps['whileHover'];\n  whileTap?: MotionProps['whileTap'];\n  whileInView?: MotionProps['whileInView'];\n  whileFocus?: MotionProps['whileFocus'];\n  whileDrag?: MotionProps['whileDrag'];\n}\n\nconst MotionCard = forwardRef<HTMLDivElement, MotionCardProps>(\n  ({ \n    className, \n    delay = 0, \n    variant = 'default', \n    enableHover = true, \n    children,\n    // Motion props with defaults\n    initial = { opacity: 0, y: 30, scale: 0.95 },\n    animate = { opacity: 1, y: 0, scale: 1 },\n    transition = { \n      duration: 0.6, \n      delay,\n      type: \"spring\",\n      stiffness: 100,\n      damping: 15\n    },\n    whileHover = enableHover ? { \n      y: -8, \n      scale: 1.02,\n      transition: { duration: 0.3 }\n    } : undefined,\n    whileTap = { scale: 0.98 },\n    whileInView,\n    whileFocus,\n    whileDrag,\n    // Extract Card-specific props that need to be forwarded\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onFocus,\n    onBlur,\n    tabIndex,\n    role,\n    id,\n    style,\n    'data-testid': dataTestId,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-expanded': ariaExpanded,\n    'aria-selected': ariaSelected,\n    ...cardProps \n  }, ref) => {\n    const getVariantClasses = () => {\n      switch (variant) {\n        case 'enhanced':\n          return 'enhanced-hover glow-border';\n        case 'gradient':\n          return 'gradient-border interactive-glow';\n        case 'interactive':\n          return 'hover-glow interactive-glow';\n        default:\n          return 'glow-border hover-glow';\n      }\n    };\n\n    // Check for reduced motion preference\n    const prefersReducedMotion = typeof window !== 'undefined' && \n      window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n    // Prepare motion props - disable if user prefers reduced motion\n    const motionProps = prefersReducedMotion ? {\n      initial: { opacity: 0 },\n      animate: { opacity: 1 },\n      transition: { duration: 0.2 },\n      whileHover: undefined,\n      whileTap: undefined,\n      whileInView: undefined,\n      whileFocus: undefined,\n      whileDrag: undefined,\n    } : {\n      initial,\n      animate,\n      transition,\n      whileHover,\n      whileTap,\n      ...(whileInView && { whileInView }),\n      ...(whileFocus && { whileFocus }),\n      ...(whileDrag && { whileDrag }),\n    };\n\n    // Prepare card props to forward\n    const forwardedCardProps = {\n      onClick,\n      onMouseEnter,\n      onMouseLeave,\n      onFocus,\n      onBlur,\n      tabIndex,\n      role,\n      id,\n      style,\n      ...(dataTestId && { 'data-testid': dataTestId }),\n      ...(ariaLabel && { 'aria-label': ariaLabel }),\n      ...(ariaLabelledby && { 'aria-labelledby': ariaLabelledby }),\n      ...(ariaDescribedby && { 'aria-describedby': ariaDescribedby }),\n      ...(ariaExpanded !== undefined && { 'aria-expanded': ariaExpanded }),\n      ...(ariaSelected !== undefined && { 'aria-selected': ariaSelected }),\n      ...cardProps\n    };\n\n    return (\n      <motion.div\n        ref={ref}\n        {...motionProps}\n      >\n        <Card \n          className={cn(getVariantClasses(), className)}\n          {...forwardedCardProps}\n        >\n          {children}\n        </Card>\n      </motion.div>\n    );\n  }\n);\n\nMotionCard.displayName = \"MotionCard\";\n\nexport default MotionCard;\nexport type { MotionCardProps };\n","size_bytes":3917},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress-ring.tsx":{"content":"import { forwardRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ProgressRingProps {\n  value: number; // 0-100\n  size?: number;\n  strokeWidth?: number;\n  className?: string;\n  showValue?: boolean;\n  color?: string;\n}\n\nconst ProgressRing = forwardRef<HTMLDivElement, ProgressRingProps>(\n  ({ \n    value, \n    size = 120, \n    strokeWidth = 8, \n    className, \n    showValue = true,\n    color = \"hsl(var(--primary))\",\n    ...props \n  }, ref) => {\n    const normalizedValue = Math.max(0, Math.min(100, value));\n    const radius = (size - strokeWidth) / 2;\n    const circumference = radius * 2 * Math.PI;\n    const strokeDashoffset = circumference - (normalizedValue / 100) * circumference;\n\n    return (\n      <div \n        ref={ref}\n        className={cn(\"relative inline-flex items-center justify-center\", className)}\n        style={{ width: size, height: size }}\n        {...props}\n      >\n        <svg\n          className=\"transform -rotate-90\"\n          width={size}\n          height={size}\n        >\n          {/* Background circle */}\n          <circle\n            cx={size / 2}\n            cy={size / 2}\n            r={radius}\n            stroke=\"hsl(var(--muted))\"\n            strokeWidth={strokeWidth}\n            fill=\"transparent\"\n            className=\"opacity-20\"\n          />\n          {/* Progress circle */}\n          <circle\n            cx={size / 2}\n            cy={size / 2}\n            r={radius}\n            stroke={color}\n            strokeWidth={strokeWidth}\n            fill=\"transparent\"\n            strokeDasharray={circumference}\n            strokeDashoffset={strokeDashoffset}\n            strokeLinecap=\"round\"\n            className=\"transition-all duration-1000 ease-out animate-glow\"\n            style={{\n              filter: `drop-shadow(0 0 8px ${color})`\n            }}\n          />\n        </svg>\n        {showValue && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">\n                {normalizedValue.toFixed(0)}%\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nProgressRing.displayName = \"ProgressRing\";\n\nexport default ProgressRing;\n","size_bytes":2269},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ai-insights-panel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Brain, \n  TrendingUp, \n  TrendingDown, \n  Target, \n  Users, \n  RefreshCw,\n  Zap,\n  Shield,\n  AlertTriangle\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface AIInsightsProps {\n  athleteId: string;\n}\n\ninterface AthleteInsights {\n  overallAnalysis: string;\n  strengths: string[];\n  weaknesses: string[];\n  recommendations: string[];\n  potentialRating: number;\n  improvementAreas: {\n    area: string;\n    priority: 'high' | 'medium' | 'low';\n    recommendation: string;\n  }[];\n  comparisonToPeers: {\n    percentile: number;\n    description: string;\n  };\n}\n\nexport default function AIInsightsPanel({ athleteId }: AIInsightsProps) {\n  const { data: insights, isLoading, error, refetch, isFetching } = useQuery<AthleteInsights>({\n    queryKey: [\"/api/athletes\", athleteId, \"ai-insights\"],\n    enabled: !!athleteId,\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-red-500';\n      case 'medium': return 'bg-yellow-500'; \n      case 'low': return 'bg-green-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high': return <AlertTriangle className=\"w-3 h-3\" />;\n      case 'medium': return <Target className=\"w-3 h-3\" />;\n      case 'low': return <Shield className=\"w-3 h-3\" />;\n      default: return <Target className=\"w-3 h-3\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"glow-border\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-lg font-heading font-bold text-foreground flex items-center\">\n            <Brain className=\"w-5 h-5 mr-2 text-primary\" />\n            AI Performance Insights\n          </CardTitle>\n          <Skeleton className=\"h-8 w-8 rounded\" />\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-3\">\n            <Skeleton className=\"h-4 w-full\" />\n            <Skeleton className=\"h-4 w-3/4\" />\n            <Skeleton className=\"h-4 w-5/6\" />\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Skeleton className=\"h-24\" />\n            <Skeleton className=\"h-24\" />\n          </div>\n          <Skeleton className=\"h-32\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"glow-border border-red-500/50\">\n        <CardContent className=\"p-6 text-center\">\n          <Brain className=\"w-12 h-12 text-red-500 mx-auto mb-4 opacity-50\" />\n          <h3 className=\"text-lg font-heading font-bold text-foreground mb-2\">\n            AI Analysis Unavailable\n          </h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Unable to generate AI insights. Please try again later.\n          </p>\n          <Button \n            onClick={() => refetch()} \n            variant=\"outline\" \n            size=\"sm\"\n            data-testid=\"button-retry-insights\"\n          >\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Retry Analysis\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!insights) {\n    return (\n      <Card className=\"glow-border\">\n        <CardContent className=\"p-6 text-center\">\n          <Brain className=\"w-12 h-12 text-muted-foreground mx-auto mb-4 opacity-50\" />\n          <h3 className=\"text-lg font-heading font-bold text-foreground mb-2\">\n            No Assessment Data\n          </h3>\n          <p className=\"text-muted-foreground\">\n            Complete some assessments to unlock AI-powered insights about this athlete's performance.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <Card className=\"glow-border hover-glow\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-lg font-heading font-bold text-foreground flex items-center\">\n            <Brain className=\"w-5 h-5 mr-2 text-primary\" />\n            AI Performance Insights\n          </CardTitle>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => refetch()}\n            disabled={isFetching}\n            data-testid=\"button-refresh-insights\"\n          >\n            <RefreshCw className={`w-4 h-4 ${isFetching ? 'animate-spin' : ''}`} />\n          </Button>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* Overall Analysis */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-heading font-semibold text-foreground flex items-center\">\n              <Zap className=\"w-4 h-4 mr-2 text-secondary\" />\n              Overall Assessment\n            </h4>\n            <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-overall-analysis\">\n              {insights.overallAnalysis}\n            </p>\n          </div>\n\n          {/* Potential Rating & Peer Comparison */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Card className=\"bg-card/50 border-border/50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-muted-foreground\">Potential Rating</span>\n                  <span className=\"text-2xl font-bold text-primary\" data-testid=\"text-potential-rating\">\n                    {insights.potentialRating.toFixed(1)}/10\n                  </span>\n                </div>\n                <Progress \n                  value={insights.potentialRating * 10} \n                  className=\"h-2\"\n                  data-testid=\"progress-potential-rating\"\n                />\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/50 border-border/50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-muted-foreground flex items-center\">\n                    <Users className=\"w-3 h-3 mr-1\" />\n                    Peer Comparison\n                  </span>\n                  <span className=\"text-2xl font-bold text-secondary\" data-testid=\"text-peer-percentile\">\n                    {insights.comparisonToPeers.percentile}%\n                  </span>\n                </div>\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-peer-description\">\n                  {insights.comparisonToPeers.description}\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Strengths & Weaknesses */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h4 className=\"font-heading font-semibold text-foreground flex items-center mb-3\">\n                <TrendingUp className=\"w-4 h-4 mr-2 text-green-500\" />\n                Strengths\n              </h4>\n              <div className=\"space-y-2\">\n                {insights.strengths.map((strength, index) => (\n                  <div \n                    key={index} \n                    className=\"flex items-start gap-2 p-2 rounded-lg bg-green-500/10 border border-green-500/20\"\n                    data-testid={`strength-${index}`}\n                  >\n                    <div className=\"w-1.5 h-1.5 rounded-full bg-green-500 mt-2 flex-shrink-0\" />\n                    <span className=\"text-sm text-foreground\">{strength}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-heading font-semibold text-foreground flex items-center mb-3\">\n                <TrendingDown className=\"w-4 h-4 mr-2 text-red-500\" />\n                Areas for Improvement\n              </h4>\n              <div className=\"space-y-2\">\n                {insights.weaknesses.map((weakness, index) => (\n                  <div \n                    key={index} \n                    className=\"flex items-start gap-2 p-2 rounded-lg bg-red-500/10 border border-red-500/20\"\n                    data-testid={`weakness-${index}`}\n                  >\n                    <div className=\"w-1.5 h-1.5 rounded-full bg-red-500 mt-2 flex-shrink-0\" />\n                    <span className=\"text-sm text-foreground\">{weakness}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Improvement Areas with Priorities */}\n          {insights.improvementAreas && insights.improvementAreas.length > 0 && (\n            <div>\n              <h4 className=\"font-heading font-semibold text-foreground flex items-center mb-3\">\n                <Target className=\"w-4 h-4 mr-2 text-primary\" />\n                Priority Improvements\n              </h4>\n              <div className=\"space-y-3\">\n                {insights.improvementAreas.map((area, index) => (\n                  <div \n                    key={index} \n                    className=\"p-3 rounded-lg bg-card/50 border border-border/50\"\n                    data-testid={`improvement-area-${index}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"font-medium text-foreground\">{area.area}</span>\n                      <Badge className={`text-white ${getPriorityColor(area.priority)}`}>\n                        {getPriorityIcon(area.priority)}\n                        <span className=\"ml-1 capitalize\">{area.priority}</span>\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {area.recommendation}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Recommendations */}\n          <div>\n            <h4 className=\"font-heading font-semibold text-foreground flex items-center mb-3\">\n              <Target className=\"w-4 h-4 mr-2 text-secondary\" />\n              AI Recommendations\n            </h4>\n            <div className=\"space-y-2\">\n              {insights.recommendations.map((recommendation, index) => (\n                <div \n                  key={index} \n                  className=\"flex items-start gap-3 p-3 rounded-lg bg-secondary/10 border border-secondary/20\"\n                  data-testid={`recommendation-${index}`}\n                >\n                  <div className=\"w-2 h-2 rounded-full bg-secondary mt-2 flex-shrink-0\" />\n                  <span className=\"text-sm text-foreground\">{recommendation}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}","size_bytes":11274},"client/src/components/video-gallery.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Video, \n  Play, \n  Clock, \n  Calendar, \n  Trophy, \n  BarChart3,\n  RefreshCw,\n  PlayCircle,\n  Maximize2\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { format, parseISO } from \"date-fns\";\nimport { useState } from \"react\";\n\ninterface VideoGalleryProps {\n  athleteId: string;\n}\n\ninterface VideoData {\n  id: string;\n  testTypeId: string;\n  createdAt: string;\n  performanceScore: number;\n  feedback: string;\n  thumbnailUrl: string;\n  videoUrl: string;\n  duration: number;\n  title: string;\n}\n\nexport default function VideoGallery({ athleteId }: VideoGalleryProps) {\n  const [selectedVideo, setSelectedVideo] = useState<VideoData | null>(null);\n\n  const { data: videos, isLoading, error, refetch, isFetching } = useQuery<VideoData[]>({\n    queryKey: [\"/api/athletes\", athleteId, \"videos\"],\n    enabled: !!athleteId,\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'bg-green-500';\n    if (score >= 60) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"glow-border\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-lg font-heading font-bold text-foreground flex items-center\">\n            <Video className=\"w-5 h-5 mr-2 text-primary\" />\n            Assessment Videos\n          </CardTitle>\n          <Skeleton className=\"h-8 w-8 rounded\" />\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"space-y-3\">\n                <Skeleton className=\"aspect-video w-full rounded-lg\" />\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-3 w-1/2\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"glow-border border-red-500/50\">\n        <CardContent className=\"p-6 text-center\">\n          <Video className=\"w-12 h-12 text-red-500 mx-auto mb-4 opacity-50\" />\n          <h3 className=\"text-lg font-heading font-bold text-foreground mb-2\">\n            Videos Unavailable\n          </h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Unable to load assessment videos. Please try again later.\n          </p>\n          <Button \n            onClick={() => refetch()} \n            variant=\"outline\" \n            size=\"sm\"\n            data-testid=\"button-retry-videos\"\n          >\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!videos || videos.length === 0) {\n    return (\n      <Card className=\"glow-border\">\n        <CardContent className=\"p-6 text-center\">\n          <Video className=\"w-12 h-12 text-muted-foreground mx-auto mb-4 opacity-50\" />\n          <h3 className=\"text-lg font-heading font-bold text-foreground mb-2\">\n            No Assessment Videos\n          </h3>\n          <p className=\"text-muted-foreground\">\n            This athlete hasn't completed any video assessments yet. Videos will appear here once assessments are submitted and analyzed.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <Card className=\"glow-border hover-glow\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-lg font-heading font-bold text-foreground flex items-center\">\n            <Video className=\"w-5 h-5 mr-2 text-primary\" />\n            Assessment Videos ({videos.length})\n          </CardTitle>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => refetch()}\n            disabled={isFetching}\n            data-testid=\"button-refresh-videos\"\n          >\n            <RefreshCw className={`w-4 h-4 ${isFetching ? 'animate-spin' : ''}`} />\n          </Button>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* Video Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {videos.map((video, index) => (\n              <motion.div\n                key={video.id}\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.3, delay: index * 0.1 }}\n                className=\"group\"\n              >\n                <Card className=\"bg-card/50 border-border/50 hover:border-primary/50 transition-all duration-300 cursor-pointer overflow-hidden\">\n                  <div className=\"relative aspect-video bg-gradient-to-br from-background to-muted\">\n                    {/* Video Thumbnail */}\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-gradient-to-br from-primary/20 to-secondary/20\">\n                      <div className=\"text-center\">\n                        <PlayCircle className=\"w-12 h-12 text-primary mx-auto mb-2 group-hover:scale-110 transition-transform\" />\n                        <span className=\"text-xs text-muted-foreground\">Assessment Video</span>\n                      </div>\n                    </div>\n                    \n                    {/* Performance Score Badge */}\n                    <div className=\"absolute top-2 left-2\">\n                      <Badge className={`text-white ${getScoreColor(video.performanceScore)}`}>\n                        {video.performanceScore.toFixed(1)}%\n                      </Badge>\n                    </div>\n                    \n                    {/* Duration Badge */}\n                    <div className=\"absolute top-2 right-2\">\n                      <Badge variant=\"secondary\" className=\"bg-black/50 text-white\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        {formatDuration(video.duration)}\n                      </Badge>\n                    </div>\n                    \n                    {/* Play Overlay */}\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button \n                          className=\"absolute inset-0 bg-transparent hover:bg-black/20 border-none\"\n                          onClick={() => setSelectedVideo(video)}\n                          data-testid={`button-play-video-${video.id}`}\n                        >\n                          <span className=\"sr-only\">Play video {video.title}</span>\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-4xl max-h-[90vh]\">\n                        <DialogHeader>\n                          <DialogTitle className=\"flex items-center gap-2\">\n                            <Video className=\"w-5 h-5 text-primary\" />\n                            {selectedVideo?.title}\n                          </DialogTitle>\n                        </DialogHeader>\n                        \n                        {selectedVideo && (\n                          <div className=\"space-y-4\">\n                            {/* Video Player */}\n                            <div className=\"aspect-video bg-black rounded-lg flex items-center justify-center\">\n                              <div className=\"text-center text-white\">\n                                <PlayCircle className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                                <p className=\"text-sm opacity-70\">Video player would be implemented here</p>\n                                <p className=\"text-xs opacity-50 mt-2\">Source: {selectedVideo.videoUrl}</p>\n                              </div>\n                            </div>\n                            \n                            {/* Video Details */}\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              <Card className=\"bg-card/50\">\n                                <CardContent className=\"p-4\">\n                                  <h4 className=\"font-heading font-semibold mb-2 flex items-center\">\n                                    <BarChart3 className=\"w-4 h-4 mr-2 text-primary\" />\n                                    Performance Score\n                                  </h4>\n                                  <div className=\"text-2xl font-bold text-primary\">\n                                    {selectedVideo.performanceScore.toFixed(1)}%\n                                  </div>\n                                </CardContent>\n                              </Card>\n                              \n                              <Card className=\"bg-card/50\">\n                                <CardContent className=\"p-4\">\n                                  <h4 className=\"font-heading font-semibold mb-2 flex items-center\">\n                                    <Calendar className=\"w-4 h-4 mr-2 text-secondary\" />\n                                    Assessment Date\n                                  </h4>\n                                  <div className=\"text-sm text-muted-foreground\">\n                                    {format(parseISO(selectedVideo.createdAt), 'MMM dd, yyyy')}\n                                  </div>\n                                </CardContent>\n                              </Card>\n                            </div>\n                            \n                            {/* AI Feedback */}\n                            {selectedVideo.feedback && (\n                              <Card className=\"bg-card/50\">\n                                <CardContent className=\"p-4\">\n                                  <h4 className=\"font-heading font-semibold mb-2 flex items-center\">\n                                    <Trophy className=\"w-4 h-4 mr-2 text-accent\" />\n                                    AI Analysis Feedback\n                                  </h4>\n                                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                                    {selectedVideo.feedback}\n                                  </p>\n                                </CardContent>\n                              </Card>\n                            )}\n                          </div>\n                        )}\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                  \n                  {/* Video Info */}\n                  <CardContent className=\"p-3\">\n                    <h4 className=\"font-heading font-semibold text-sm text-foreground mb-1\" data-testid={`text-video-title-${video.id}`}>\n                      {video.title}\n                    </h4>\n                    <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                      <span className=\"flex items-center\">\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {format(parseISO(video.createdAt), 'MMM dd')}\n                      </span>\n                      <span className=\"flex items-center\">\n                        <BarChart3 className=\"w-3 h-3 mr-1\" />\n                        {video.performanceScore.toFixed(0)}%\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 pt-4 border-t border-border\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-primary\" data-testid=\"text-total-videos\">\n                {videos.length}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Total Videos</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-secondary\" data-testid=\"text-avg-score\">\n                {(videos.reduce((sum, v) => sum + v.performanceScore, 0) / videos.length).toFixed(1)}%\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Avg Score</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-accent\" data-testid=\"text-best-score\">\n                {Math.max(...videos.map(v => v.performanceScore)).toFixed(1)}%\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Best Score</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-green-500\" data-testid=\"text-total-duration\">\n                {formatDuration(videos.reduce((sum, v) => sum + v.duration, 0))}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Total Duration</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}","size_bytes":13739},"shared/constants.ts":{"content":"// Sports categories and lists for the Kala Kaushal platform\n\nexport const SPORTS_CATEGORIES = {\n  TEAM_SPORTS: 'Team Sports',\n  INDIVIDUAL_SPORTS: 'Individual Sports',\n  COMBAT_SPORTS: 'Combat Sports',\n  WATER_SPORTS: 'Water Sports',\n  ATHLETIC_EVENTS: 'Athletic Events',\n  RACQUET_SPORTS: 'Racquet Sports',\n  WINTER_SPORTS: 'Winter Sports',\n  EXTREME_SPORTS: 'Extreme Sports'\n} as const;\n\nexport const SPORTS_LIST = [\n  // Team Sports\n  { name: 'Cricket', category: SPORTS_CATEGORIES.TEAM_SPORTS, emoji: '🏏' },\n  { name: 'Football (Soccer)', category: SPORTS_CATEGORIES.TEAM_SPORTS, emoji: '⚽' },\n  { name: 'Basketball', category: SPORTS_CATEGORIES.TEAM_SPORTS, emoji: '🏀' },\n  { name: 'Volleyball', category: SPORTS_CATEGORIES.TEAM_SPORTS, emoji: '🏐' },\n  { name: 'Kabaddi', category: SPORTS_CATEGORIES.TEAM_SPORTS, emoji: '🤼' },\n  { name: 'Hockey', category: SPORTS_CATEGORIES.TEAM_SPORTS, emoji: '🏑' },\n  { name: 'Rugby', category: SPORTS_CATEGORIES.TEAM_SPORTS, emoji: '🏈' },\n  { name: 'Handball', category: SPORTS_CATEGORIES.TEAM_SPORTS, emoji: '🤾' },\n  { name: 'Baseball', category: SPORTS_CATEGORIES.TEAM_SPORTS, emoji: '⚾' },\n  { name: 'American Football', category: SPORTS_CATEGORIES.TEAM_SPORTS, emoji: '🏈' },\n\n  // Individual Sports\n  { name: 'Athletics (Track & Field)', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '🏃' },\n  { name: 'Swimming', category: SPORTS_CATEGORIES.WATER_SPORTS, emoji: '🏊' },\n  { name: 'Gymnastics', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '🤸' },\n  { name: 'Weightlifting', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '🏋️' },\n  { name: 'Cycling', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '🚴' },\n  { name: 'Running (Marathon)', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n  { name: 'Wrestling', category: SPORTS_CATEGORIES.COMBAT_SPORTS, emoji: '🤼' },\n  { name: 'Boxing', category: SPORTS_CATEGORIES.COMBAT_SPORTS, emoji: '🥊' },\n  { name: 'Archery', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '🏹' },\n  { name: 'Shooting', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '🏆' },\n\n  // Racquet Sports\n  { name: 'Tennis', category: SPORTS_CATEGORIES.RACQUET_SPORTS, emoji: '🎾' },\n  { name: 'Badminton', category: SPORTS_CATEGORIES.RACQUET_SPORTS, emoji: '🏸' },\n  { name: 'Table Tennis', category: SPORTS_CATEGORIES.RACQUET_SPORTS, emoji: '🏓' },\n  { name: 'Squash', category: SPORTS_CATEGORIES.RACQUET_SPORTS, emoji: '🎾' },\n\n  // Combat Sports\n  { name: 'Judo', category: SPORTS_CATEGORIES.COMBAT_SPORTS, emoji: '🥋' },\n  { name: 'Karate', category: SPORTS_CATEGORIES.COMBAT_SPORTS, emoji: '🥋' },\n  { name: 'Taekwondo', category: SPORTS_CATEGORIES.COMBAT_SPORTS, emoji: '🥋' },\n  { name: 'Mixed Martial Arts (MMA)', category: SPORTS_CATEGORIES.COMBAT_SPORTS, emoji: '🥊' },\n  { name: 'Kung Fu', category: SPORTS_CATEGORIES.COMBAT_SPORTS, emoji: '🥋' },\n\n  // Water Sports\n  { name: 'Water Polo', category: SPORTS_CATEGORIES.WATER_SPORTS, emoji: '🤽' },\n  { name: 'Diving', category: SPORTS_CATEGORIES.WATER_SPORTS, emoji: '🏊' },\n  { name: 'Surfing', category: SPORTS_CATEGORIES.WATER_SPORTS, emoji: '🏄' },\n  { name: 'Sailing', category: SPORTS_CATEGORIES.WATER_SPORTS, emoji: '⛵' },\n  { name: 'Rowing', category: SPORTS_CATEGORIES.WATER_SPORTS, emoji: '🚣' },\n\n  // Athletic Events\n  { name: 'Sprinting (100m, 200m, 400m)', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n  { name: 'Long Distance Running', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n  { name: 'High Jump', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n  { name: 'Long Jump', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n  { name: 'Pole Vault', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n  { name: 'Shot Put', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n  { name: 'Discus Throw', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n  { name: 'Javelin Throw', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n  { name: 'Hammer Throw', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n  { name: 'Decathlon', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n  { name: 'Heptathlon', category: SPORTS_CATEGORIES.ATHLETIC_EVENTS, emoji: '🏃' },\n\n  // Traditional Indian Sports\n  { name: 'Kho Kho', category: SPORTS_CATEGORIES.TEAM_SPORTS, emoji: '🏃' },\n  { name: 'Mallakhamb', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '🤸' },\n  { name: 'Pehlwani (Indian Wrestling)', category: SPORTS_CATEGORIES.COMBAT_SPORTS, emoji: '🤼' },\n  { name: 'Gatka', category: SPORTS_CATEGORIES.COMBAT_SPORTS, emoji: '⚔️' },\n  { name: 'Kalaripayattu', category: SPORTS_CATEGORIES.COMBAT_SPORTS, emoji: '🥋' },\n\n  // Winter Sports (for completeness)\n  { name: 'Skiing', category: SPORTS_CATEGORIES.WINTER_SPORTS, emoji: '⛷️' },\n  { name: 'Ice Hockey', category: SPORTS_CATEGORIES.WINTER_SPORTS, emoji: '🏒' },\n  { name: 'Figure Skating', category: SPORTS_CATEGORIES.WINTER_SPORTS, emoji: '⛸️' },\n  { name: 'Snowboarding', category: SPORTS_CATEGORIES.WINTER_SPORTS, emoji: '🏂' },\n\n  // Extreme/Adventure Sports\n  { name: 'Rock Climbing', category: SPORTS_CATEGORIES.EXTREME_SPORTS, emoji: '🧗' },\n  { name: 'Paragliding', category: SPORTS_CATEGORIES.EXTREME_SPORTS, emoji: '🪂' },\n  { name: 'Skateboarding', category: SPORTS_CATEGORIES.EXTREME_SPORTS, emoji: '🛹' },\n  { name: 'BMX', category: SPORTS_CATEGORIES.EXTREME_SPORTS, emoji: '🚴' },\n\n  // Motor Sports\n  { name: 'Motor Racing', category: SPORTS_CATEGORIES.EXTREME_SPORTS, emoji: '🏎️' },\n  { name: 'Motorcycle Racing', category: SPORTS_CATEGORIES.EXTREME_SPORTS, emoji: '🏍️' },\n\n  // Equestrian\n  { name: 'Equestrian', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '🏇' },\n\n  // Golf\n  { name: 'Golf', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '⛳' },\n\n  // Yoga/Fitness\n  { name: 'Yoga', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '🧘' },\n  { name: 'Bodybuilding', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '💪' },\n  { name: 'Powerlifting', category: SPORTS_CATEGORIES.INDIVIDUAL_SPORTS, emoji: '🏋️' },\n] as const;\n\n// Helper functions\nexport const getSportsByCategory = (category: string) => {\n  return SPORTS_LIST.filter(sport => sport.category === category);\n};\n\nexport const getAllSportNames = () => {\n  return SPORTS_LIST.map(sport => sport.name);\n};\n\nexport const getSportEmoji = (sportName: string) => {\n  const sport = SPORTS_LIST.find(s => s.name === sportName);\n  return sport?.emoji || '🏆';\n};\n\nexport const getSportCategory = (sportName: string) => {\n  const sport = SPORTS_LIST.find(s => s.name === sportName);\n  return sport?.category || SPORTS_CATEGORIES.INDIVIDUAL_SPORTS;\n};","size_bytes":6861}},"version":1}